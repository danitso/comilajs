{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/Parser/Constant/TableIndexes.js","webpack:///./src/Parser/Reference/RowReference.js","webpack:///./node_modules/extend/index.js","webpack:///./src/Parser/Method/MethodOperation.js","webpack:///./src/Parser/Exception/ParserException.js","webpack:///./src/Parser/Constant/OpCodes.js","webpack:///./src/Exception/NotImplementedException.js","webpack:///./src/Parser/Directory/ResourceDirectory.js","webpack:///./src/Parser/Constant/ImageAttributes.js","webpack:///./src/Parser/Method/Operation/TokenOperation.js","webpack:///./src/Exception/CustomException.js","webpack:///./src/Parser/Header/DataDirectoryHeader.js","webpack:///./src/Compiler/Module.js","webpack:///./src/Compiler/Compiler.js","webpack:///./src/Parser/Row/TypeSpecRow.js","webpack:///./src/Parser/Row/TypeRefRow.js","webpack:///./src/Parser/Row/TypeDefRow.js","webpack:///./src/Parser/Header/TablesHeader.js","webpack:///./src/Parser/Row/StandAloneSigRow.js","webpack:///./src/Parser/Row/PropertyRow.js","webpack:///./src/Parser/Row/PropertyMapRow.js","webpack:///./src/Parser/Header/SectionHeader.js","webpack:///./src/Parser/Entry/ResourceDataEntry.js","webpack:///./src/Parser/Entry/ResourceDirectoryEntry.js","webpack:///./src/Parser/Header/OptionalHeader.js","webpack:///./src/Parser/Header/DOSHeader.js","webpack:///./src/Parser/Header/COFFHeader.js","webpack:///./src/Parser/BinaryParser.js","webpack:///./src/Parser/PEParser.js","webpack:///./src/Parser/Row/ParamRow.js","webpack:///./src/Parser/Row/ModuleRow.js","webpack:///./src/Parser/Row/ModuleRefRow.js","webpack:///./src/Parser/Row/MethodSemanticsRow.js","webpack:///./src/Parser/Row/MethodImplRow.js","webpack:///./src/Parser/Method/Operation/ReturnOperation.js","webpack:///./src/Parser/Method/Operation/NoOperation.js","webpack:///./src/Parser/Method/Operation/LoadStringOperation.js","webpack:///./src/Parser/Method/Operation/LoadArgumentOperation.js","webpack:///./src/Parser/Method/Operation/CallOperation.js","webpack:///./src/Parser/Method/MethodOperationFactory.js","webpack:///./src/Parser/Constant/MethodFlags.js","webpack:///./src/Parser/Method/MethodHeader.js","webpack:///./src/Parser/Method/MethodBody.js","webpack:///./src/Parser/Row/MethodDefRow.js","webpack:///./src/Parser/Row/NestedClassRow.js","webpack:///./src/Parser/Row/MemberRefRow.js","webpack:///./src/Parser/Header/StreamHeader.js","webpack:///./src/Parser/Header/MetadataHeader.js","webpack:///./src/Parser/Row/ManifestResourceRow.js","webpack:///./src/Parser/Row/InterfaceImplRow.js","webpack:///./src/Parser/Row/ImplMapRow.js","webpack:///./src/Parser/Row/GenericParamConstraintRow.js","webpack:///./src/Parser/Row/GenericParamRow.js","webpack:///./src/Parser/Row/FileRow.js","webpack:///./src/Parser/Row/FieldMarshalRow.js","webpack:///./src/Parser/Row/FieldLayoutRow.js","webpack:///./src/Parser/Row/FieldRVARow.js","webpack:///./src/Parser/Row/FieldRow.js","webpack:///./src/Parser/Row/ExportedTypeRow.js","webpack:///./src/Parser/Row/EventRow.js","webpack:///./src/Parser/Row/EventMapRow.js","webpack:///./src/Parser/Row/DeclSecurityRow.js","webpack:///./src/Parser/Row/CustomAttributeRow.js","webpack:///./src/Parser/Header/CORHeader.js","webpack:///./src/Parser/Row/ConstantRow.js","webpack:///./src/Parser/Row/ClassLayoutRow.js","webpack:///./src/Parser/Row/AssemblyRow.js","webpack:///./src/Parser/Row/AssemblyRefRow.js","webpack:///./src/Parser/Row/AssemblyRefProcessorRow.js","webpack:///./src/Parser/Row/AssemblyRefOSRow.js","webpack:///./src/Parser/Row/AssemblyProcessorRow.js","webpack:///./src/Parser/Row/AssemblyOSRow.js","webpack:///./src/Parser/CILParser.js","webpack:///./src/Main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","this","ASSEMBLY","ASSEMBLY_OS","ASSEMBLY_PROCESSOR","ASSEMBLY_REF","ASSEMBLY_REF_OS","ASSEMBLY_REF_PROCESSOR","CLASS_LAYOUT","CONSTANT","CUSTOM_ATTRIBUTE","DECL_SECURITY","EVENT","EVENT_MAP","EXPORTED_TYPE","FIELD","FIELD_LAYOUT","FIELD_MARSHAL","FIELD_RVA","FILE","GENERIC_PARAM","GENERIC_PARAM_CONSTRAINT","IMPL_MAP","INTERFACE_IMPL","MANIFEST_RESOURCE","MEMBER_REF","METHOD_DEF","METHOD_IMPL","METHOD_SEMANTICS","MODULE","MODULE_REF","NESTED_CLASS","PARAM","PROPERTY","PROPERTY_MAP","STAND_ALONE_SIG","TYPE_REF","TYPE_DEF","TYPE_SPEC","parser","tableIndexes","rowIndex","tableIndex","length","readUInt","bv","bc","size","tables","readTables","Math","pow","tableRowIndex","hasOwn","toStr","toString","isArray","arr","Array","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","extend","options","src","copy","copyIsArray","clone","target","arguments","deep","code","CustomException","Extend","message","ADD","ADD_OVF","ADD_OVF_UN","ARGLIST","AND","BEQ","BEQ_S","BGE","BGE_S","BGE_UN","BGE_UN_S","BGT","BGT_S","BGT_UN","BGT_UN_S","BLE","BLE_S","BLE_UN","BLE_UN_S","BLT","BLT_S","BLT_UN","BLT_UN_S","BNE_UN","BNE_UN_S","BOX","BR","BR_S","BREAK","BRFALSE","BRFALSE_S","BRINST","BRINST_S","BRNULL","BRNULL_S","BRTRUE","BRTRUE_S","BRZERO","BRZERO_S","CALL","CALLI","CALLVIRT","CASTCLASS","CEQ","CGT","CGT_UN","CKFINITE","CLT","CLT_UN","CONSTRAINED","CONV_I","CONV_I1","CONV_I2","CONV_I4","CONV_I8","CONV_OVF_I","CONV_OVF_I_UN","CONV_OVF_I1","CONV_OVF_I1_UN","CONV_OVF_I2","CONV_OVF_I2_UN","CONV_OVF_I4","CONV_OVF_I4_UN","CONV_OVF_I8","CONV_OVF_I8_UN","CONV_OVF_U","CONV_OVF_U_UN","CONV_OVF_U1","CONV_OVF_U1_UN","CONV_OVF_U2","CONV_OVF_U2_UN","CONV_OVF_U4","CONV_OVF_U4_UN","CONV_OVF_U8","CONV_OVF_U8_UN","CONV_R_UN","CONV_R4","CONV_R8","CONV_U","CONV_U1","CONV_U2","CONV_U4","CONV_U8","CPBLK","CPOBJ","DIV","DIV_UN","DUP","ENDFAULT","ENDFILTER","ENDFINALLY","INITBLK","INITOBJ","ISINST","JMP","LDARG","LDARG_0","LDARG_1","LDARG_2","LDARG_3","LDARG_S","LDARGA","LDARGA_S","LDC_I4","LDC_I4_0","LDC_I4_1","LDC_I4_2","LDC_I4_3","LDC_I4_4","LDC_I4_5","LDC_I4_6","LDC_I4_7","LDC_I4_8","LDC_I4_M1","LDC_I4_S","LDC_I8","LDC_R4","LDC_R8","LDELEM","LDELEM_I","LDELEM_I1","LDELEM_I2","LDELEM_I4","LDELEM_I8","LDELEM_R4","LDELEM_R8","LDELEM_REF","LDELEM_U1","LDELEM_U2","LDELEM_U4","LDELEM_U8","LDELEMA","LDFLD","LDFLDA","LDFTN","LDIND_I","LDIND_I1","LDIND_I2","LDIND_I4","LDIND_I8","LDIND_R4","LDIND_R8","LDIND_REF","LDIND_U1","LDIND_U2","LDIND_U4","LDIND_U8","LDLEN","LDLOC","LDLOC_0","LDLOC_1","LDLOC_S","LDLOCA","LDLOCA_S","LDNULL","LDOBJ","LDSFLD","LDSFLDA","LDSTR","LDTOKEN","LDVIRTFTN","LEAVE","LEAVE_S","LOCALLOC","MKREFANY","MUL","MUL_OVF","MUL_OVF_UN","NEG","NEWARR","NEWOBJ","NO_TYPE_RANGE_NULL_CHECK","NOP","NOT","OR","POP","READONLY","REFANYTYPE","REFANYVAL","REM","REM_UN","RET","RETHROW","SHL","SHR","SHR_UN","SIZEOF","STARG","STARG_S","STELEM","STELEM_I","STELEM_I1","STELEM_I2","STELEM_I4","STELEM_I8","STELEM_R4","STELEM_R8","STELEM_REF","STFLD","STIND_I","STIND_I1","STIND_I2","STIND_I4","STIND_I8","STIND_R4","STIND_R8","STIND_REF","STLOC","STLOC_0","STLOC_1","STLOC_2","STLOC_3","STLOC_S","STOBJ","STSFLD","SUB","SUB_OVF","SUB_OVF_UN","SWITCH","TAIL","THROW","UNALIGNED","UNBOX","UNBOX_ANY","VOLATILE","XOR","reader","characteristics","timeDateStamp","majorVersion","minorVersion","numberOfNamedEntries","numberOfIdEntries","entries","position","getPosition","setPosition","ResourceDirectoryEntry","IMAGE_DOS_SIGNATURE","IMAGE_NT_OPTIONAL_HDR64_MAGIC","IMAGE_NT_OPTIONAL_HDR32_MAGIC","IMAGE_NT_SIGNATURE","IMAGE_ROM_OPTIONAL_HDR_MAGIC","MethodOperation","RowReference","token","type","_message","_type","getMessage","getType","virtualAddress","NotImplementedException","_blob","_guid","_strings","_tables","_unicodeStrings","run","compile","console","log","readDOSHeader","readCOFFHeader","readOptionalHeader","readSectionHeaders","readResourceDirectory","readCORHeader","readMetadataHeader","readTablesHeader","readMethodBodies","signature","readBlobIndex","TableIndexes","resolutionScope","typeName","readStringIndex","typeNamespace","flags","extends","fieldList","methodList","i1","i2","reserved1","heapOffsetSizes","reserved2","maskValidArray","maskValid","maskSortedArray","maskSorted","tablesOffset","parent","propertyList","readUTF8String","misc","sizeOfRawData","pointerToRawData","pointerToRelocations","pointerToLinenumbers","numberOfRelocations","numberOfLinenumbers","offsetToData","getFileOffset","codePage","reserved","ResourceDataEntry","ResourceDirectory","data","directory","getResourceDirectoryFileOffset","DataDirectoryHeader","ImageAttributes","magic","majorLinkerVersion","minorLinkerVersion","sizeOfCode","sizeOfInitializedData","sizeOfUninitializedData","addressOfEntryPoint","baseOfCode","baseOfData","imageBase","sectionAlignment","fileAlignment","majorOperatingSystemVersion","minorOperatingSystemVersion","majorImageVersion","minorImageVersion","majorSubsystemVersion","minorSubsystemVersion","win32VersionValue","sizeOfImage","sizeOfHeaders","checkSum","subsystem","dllCharacteristics","sizeOfStackReserve","sizeOfStackCommit","sizeOfHeapReserve","sizeOfHeapCommit","loaderFlags","numberOfRvaAndSizes","dataDirectory","cblp","cp","crlc","cparhdr","minAlloc","maxAlloc","ss","sp","csum","ip","cs","lfarlc","ovno","res1","readUIntArray","oemid","oeminfo","res2","lfanew","machine","numberOfSections","pointerToSymbolTable","numberOfSymbols","sizeOfOptionalHeader","path","_data","Uint8Array","_path","_position","getPath","getSize","byteLength","loadFile","success","error","request","XMLHttpRequest","open","responseType","onreadystatechange","readyState","DONE","status","response","send","readBytes","count","bytes","push","readString","terminate","boundary","String","fromCharCode","endsWith","indexOf","substring","integer","integers","decodeURI","encodeURIComponent","setPath","BinaryParser","COFFHeader","DOSHeader","ParserException","OptionalHeader","SectionHeader","_coffHeader","_dosHeader","_optionalHeader","_resourceDirectory","_resourceDirectoryFileOffset","_sectionHeaders","rva","sectionHeaders","sectionHeader","sequence","generation","mvid","readGUIDIndex","encId","encBaseId","semantics","method","association","class","methodBody","methodDeclaration","TokenOperation","OpCodes","index","CallOperation","LoadArgumentOperation","LoadStringOperation","NoOperation","ReturnOperation","_classes","parse","toUpperCase","register","FAT_FORMAT","INITIALIZE_LOCALS","MORE_SECTIONS","TINY_FORMAT","MethodFlags","flagsAndSize","thin","headerSize","maxStack","operationsSize","localVarSigTok","operationsOffset","MethodHeader","MethodOperationFactory","header","operations","toLowerCase","replace","implFlags","paramList","nestedClass","enclosingClass","offset","StreamHeader","versionLength","version","streams","streamHeaders","implementation","interface","mappingFlags","memberForwarded","importName","importScope","owner","constraint","number","hashValue","nativeType","field","typeDefId","eventFlags","eventType","eventList","action","permissionSet","sizeOfHeader","majorRuntimeVersion","minorRuntimeVersion","metadata","entryPoint","resources","strongNameSignature","codeManagerTable","vTableFixups","exportAddressTableJumps","managedNativeHeader","packingSize","classSize","hashAlgId","buildNumber","revisionNumber","publicKey","culture","publicKeyOrToken","processor","assemblyRef","osPlatformID","osMajorVersion","osMinorVersion","AssemblyOSRow","AssemblyProcessorRow","AssemblyRefOSRow","AssemblyRefProcessorRow","AssemblyRefRow","AssemblyRow","ClassLayoutRow","ConstantRow","CORHeader","CustomAttributeRow","DeclSecurityRow","EventMapRow","EventRow","ExportedTypeRow","FieldRow","FieldRVARow","FieldLayoutRow","FieldMarshalRow","FileRow","GenericParamRow","GenericParamConstraintRow","ImplMapRow","InterfaceImplRow","ManifestResourceRow","MetadataHeader","MemberRefRow","NestedClassRow","MethodDefRow","MethodBody","MethodImplRow","MethodSemanticsRow","ModuleRefRow","ModuleRow","ParamRow","PEParser","PropertyMapRow","PropertyRow","StandAloneSigRow","TablesHeader","TypeDefRow","TypeRefRow","TypeSpecRow","_corHeader","_metadataHeader","_methodBodies","_tablesHeader","getStreamHeader","readGUIDFromHeap","streamHeader","guid","hex","charCodeAt","readMethodInstructions","codeOffset","codeSize","readStringFromHeap","decodeURIComponent","rowClass","_getTableRowClass","rowCount","CILParser","Compiler","info","ex"],"mappings":"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","file":"comila.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"comilajs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"comilajs\"] = factory();\n\telse\n\t\troot[\"comilajs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/assets/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 73);\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class TableIndexes.\n *\n * @constructor\n * @struct\n */\nfunction TableIndexes () {\n\n  'use strict';\n\n  /**\n   * The table index for the 'Assembly' table.\n   *\n   * @const {number}\n   */\n  this.ASSEMBLY = 32;\n\n  /**\n   * The table index for the 'AssemblyOS' table.\n   *\n   * @const {number}\n   */\n  this.ASSEMBLY_OS = 34;\n\n  /**\n   * The table index for the 'AssemblyProcessor' table.\n   *\n   * @const {number}\n   */\n  this.ASSEMBLY_PROCESSOR = 33;\n\n  /**\n   * The table index for the 'AssemblyRef' table.\n   *\n   * @const {number}\n   */\n  this.ASSEMBLY_REF = 35;\n\n  /**\n   * The table index for the 'AssemblyRefOS' table.\n   *\n   * @const {number}\n   */\n  this.ASSEMBLY_REF_OS = 37;\n\n  /**\n   * The table index for the 'AssemblyRefProcessor' table.\n   *\n   * @const {number}\n   */\n  this.ASSEMBLY_REF_PROCESSOR = 36;\n\n  /**\n   * The table index for the 'ClassLayout' table.\n   *\n   * @const {number}\n   */\n  this.CLASS_LAYOUT = 15;\n\n  /**\n   * The table index for the 'Constant' table.\n   *\n   * @const {number}\n   */\n  this.CONSTANT = 11;\n\n  /**\n   * The table index for the 'CustomAttribute' table.\n   *\n   * @const {number}\n   */\n  this.CUSTOM_ATTRIBUTE = 12;\n\n  /**\n   * The table index for the 'DeclSecurity' table.\n   *\n   * @const {number}\n   */\n  this.DECL_SECURITY = 14;\n\n  /**\n   * The table index for the 'Event' table.\n   *\n   * @const {number}\n   */\n  this.EVENT = 20;\n\n  /**\n   * The table index for the 'EventMap' table.\n   *\n   * @const {number}\n   */\n  this.EVENT_MAP = 18;\n\n  /**\n   * The table index for the 'ExportedType' table.\n   *\n   * @const {number}\n   */\n  this.EXPORTED_TYPE = 39;\n\n  /**\n   * The table index for the 'Field' table.\n   *\n   * @const {number}\n   */\n  this.FIELD = 4;\n\n  /**\n   * The table index for the 'FieldLayout' table.\n   *\n   * @const {number}\n   */\n  this.FIELD_LAYOUT = 16;\n\n  /**\n   * The table index for the 'FieldMarshal' table.\n   *\n   * @const {number}\n   */\n  this.FIELD_MARSHAL = 13;\n\n  /**\n   * The table index for the 'FieldRVA' table.\n   *\n   * @const {number}\n   */\n  this.FIELD_RVA = 29;\n\n  /**\n   * The table index for the 'File' table.\n   *\n   * @const {number}\n   */\n  this.FILE = 38;\n\n  /**\n   * The table index for the 'GenericParam' table.\n   *\n   * @const {number}\n   */\n  this.GENERIC_PARAM = 42;\n\n  /**\n   * The table index for the 'GenericParamConstraint' table.\n   *\n   * @const {number}\n   */\n  this.GENERIC_PARAM_CONSTRAINT = 44;\n\n  /**\n   * The table index for the 'ImplMap' table.\n   *\n   * @const {number}\n   */\n  this.IMPL_MAP = 28;\n\n  /**\n   * The table index for the 'InterfaceImpl' table.\n   *\n   * @const {number}\n   */\n  this.INTERFACE_IMPL = 9;\n\n  /**\n   * The table index for the 'ManifestResource' table.\n   *\n   * @const {number}\n   */\n  this.MANIFEST_RESOURCE = 40;\n\n  /**\n   * The table index for the 'MemberRef' table.\n   *\n   * @const {number}\n   */\n  this.MEMBER_REF = 10;\n\n  /**\n   * The table index for the 'MethodDef' table.\n   *\n   * @const {number}\n   */\n  this.METHOD_DEF = 6;\n\n  /**\n   * The table index for the 'MethodImpl' table.\n   *\n   * @const {number}\n   */\n  this.METHOD_IMPL = 25;\n\n  /**\n   * The table index for the 'MethodSemantics' table.\n   *\n   * @const {number}\n   */\n  this.METHOD_SEMANTICS = 24;\n\n  /**\n   * The table index for the 'Module' table.\n   *\n   * @const {number}\n   */\n  this.MODULE = 0;\n\n  /**\n   * The table index for the 'ModuleRef' table.\n   *\n   * @const {number}\n   */\n  this.MODULE_REF = 26;\n\n  /**\n   * The table index for the 'NestedClass' table.\n   *\n   * @const {number}\n   */\n  this.NESTED_CLASS = 41;\n\n  /**\n   * The table index for the 'Param' table.\n   *\n   * @const {number}\n   */\n  this.PARAM = 8;\n\n  /**\n   * The table index for the 'Property' table.\n   *\n   * @const {number}\n   */\n  this.PROPERTY = 23;\n\n  /**\n   * The table index for the 'PropertyMap' table.\n   *\n   * @const {number}\n   */\n  this.PROPERTY_MAP = 21;\n\n  /**\n   * The table index for the 'StandAloneSig' table.\n   *\n   * @const {number}\n   */\n  this.STAND_ALONE_SIG = 17;\n\n  /**\n   * The table index for the 'TypeRef' table.\n   *\n   * @const {number}\n   */\n  this.TYPE_REF = 1;\n\n  /**\n   * The table index for the 'TypeDef' table.\n   *\n   * @const {number}\n   */\n  this.TYPE_DEF = 2;\n\n  /**\n   * The table index for the 'TypeSpec' table.\n   *\n   * @const {number}\n   */\n  this.TYPE_SPEC = 27;\n\n}\n\nmodule.exports = new TableIndexes();\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class RowReference.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {Array<number>} tableIndexes\n *   The table indexes.\n *\n * @constructor\n * @struct\n */\nfunction RowReference (parser, tableIndexes) {\n\n  'use strict';\n\n  /**\n   * The row index.\n   *\n   * @type {number}\n   */\n  this.rowIndex = -1;\n\n  /**\n   * The table index.\n   *\n   * @type {number}\n   */\n  this.tableIndex = -1;\n\n  // Initialize the object.\n  (function (object, parser, tableIndexes) {\n\n    if (tableIndexes.length === 0) {\n      object.rowIndex = parser.readUInt(3) - 1;\n      object.tableIndex = parser.readUInt(1);\n    }\n    else {\n      var bc = 1, bv, size = 2, tables = parser.readTables();\n\n      // Determine how many bits are required to represent the table index.\n      while ((bv = Math.pow(2, bc - 1)) < tableIndexes.length) {\n        bc++;\n      }\n\n      // Determine if the index is represented as a 16-bit or 32-bit integer.\n      for (var i = 0; i < tableIndexes.length; i++) {\n        if ((tables[tableIndexes[i]]) &&\n          (tables[tableIndexes[i]].length > 0xFFFF)) {\n          size = 4;\n          break;\n        }\n      }\n\n      // Read the integer that contains both the table index and the row index.\n      var tableRowIndex = parser.readUInt(size);\n\n      // Split the integer into two separate values and update the properties.\n      object.tableIndex = tableIndexes[tableRowIndex & (bv - 1)];\n      object.rowIndex = tableRowIndex >> bc;\n    }\n\n  }(this, parser, tableIndexes));\n\n}\n\nmodule.exports = RowReference;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class MethodOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @struct\n */\nfunction MethodOperation (parser, code, name) {\n\n  'use strict';\n\n  /**\n   * The operation code.\n   *\n   * @type {number}\n   */\n  this.code = code;\n\n  /**\n   * The operation name.\n   *\n   * @type {string}\n   */\n  this.name = name;\n\n}\n\nmodule.exports = MethodOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar CustomException = require('./../../Exception/CustomException');\nvar Extend = require('extend');\n\n/**\n * Class ParserException.\n *\n * @param {string} message\n *   The message.\n *\n * @constructor\n * @extends {CustomException}\n */\nfunction ParserException (message) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new CustomException(message, 'ParserException'));\n\n}\n\nmodule.exports = ParserException;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class OpCodes.\n *\n * @constructor\n * @struct\n */\nfunction OpCodes () {\n\n  'use strict';\n\n  /**\n   * The op-code for the 'add' instruction.\n   *\n   * Add two values, returning a new value.\n   *\n   * @const {number}\n   */\n  this.ADD = 0x58;\n\n  /**\n   * The op-code for the 'add.ovf' instruction.\n   *\n   * Add signed integer values with overflow check.\n   *\n   * @const {number}\n   */\n  this.ADD_OVF = 0xD6;\n\n  /**\n   * The op-code for the 'add.ovf.un' instruction.\n   *\n   * Add unsigned integer values with overflow check.\n   *\n   * @const {number}\n   */\n  this.ADD_OVF_UN = 0xD7;\n\n  /**\n   * The op-code for the 'arglist' instruction.\n   *\n   * Return argument list handle for the current method.\n   *\n   * @const {number}\n   */\n  this.ARGLIST = 0xFE00;\n\n  /**\n   * The op-code for the 'and' instruction.\n   *\n   * Bitwise AND of two integral values, returns an integral value.\n   *\n   * @const {number}\n   */\n  this.AND = 0x5F;\n\n  /**\n   * The op-code for the 'beq' instruction.\n   *\n   * Branch to target if equal.\n   *\n   * @const {number}\n   */\n  this.BEQ = 0x3B;\n\n  /**\n   * The op-code for the 'beq.s' instruction.\n   *\n   * Branch to target if equal, short form.\n   *\n   * @const {number}\n   */\n  this.BEQ_S = 0x2E;\n\n  /**\n   * The op-code for the 'bge' instruction.\n   *\n   * Branch to target if greater than or equal to.\n   *\n   * @const {number}\n   */\n  this.BGE = 0x3C;\n\n  /**\n   * The op-code for the 'bge.s' instruction.\n   *\n   * Branch to target if greater than or equal to, short form.\n   *\n   * @const {number}\n   */\n  this.BGE_S = 0x2F;\n\n  /**\n   * The op-code for the 'bge.un' instruction.\n   *\n   * Branch to target if greater than or equal to, short form.\n   *\n   * @const {number}\n   */\n  this.BGE_UN = 0x41;\n\n  /**\n   * The op-code for the 'bge.un.s' instruction.\n   *\n   * Branch to target if greater than or equal to (unsigned or unordered), short\n   * form.\n   *\n   * @const {number}\n   */\n  this.BGE_UN_S = 0x34;\n\n  /**\n   * The op-code for the 'bgt' instruction.\n   *\n   * Branch to target if greater than.\n   *\n   * @const {number}\n   */\n  this.BGT = 0x3D;\n\n  /**\n   * The op-code for the 'bgt.s' instruction.\n   *\n   * Branch to target if greater than, short form.\n   *\n   * @const {number}\n   */\n  this.BGT_S = 0x30;\n\n  /**\n   * The op-code for the 'bgt.un' instruction.\n   *\n   * Branch to target if greater than (unsigned or unordered).\n   *\n   * @const {number}\n   */\n  this.BGT_UN = 0x42;\n\n  /**\n   * The op-code for the 'bgt.un.s' instruction.\n   *\n   * Branch to target if greater than (unsigned or unordered), short form.\n   *\n   * @const {number}\n   */\n  this.BGT_UN_S = 0x35;\n\n  /**\n   * The op-code for the 'ble' instruction.\n   *\n   * Branch to target if less than or equal to.\n   *\n   * @const {number}\n   */\n  this.BLE = 0x3E;\n\n  /**\n   * The op-code for the 'ble.s' instruction.\n   *\n   * Branch to target if less than or equal to, short form.\n   *\n   * @const {number}\n   */\n  this.BLE_S = 0x31;\n\n  /**\n   * The op-code for the 'ble.un' instruction.\n   *\n   * Branch to target if less than or equal to (unsigned or unordered).\n   *\n   * @const {number}\n   */\n  this.BLE_UN = 0x43;\n\n  /**\n   * The op-code for the 'ble.un.s' instruction.\n   *\n   * Branch to target if less than or equal to (unsigned or unordered), short\n   * form.\n   *\n   * @const {number}\n   */\n  this.BLE_UN_S = 0x36;\n\n  /**\n   * The op-code for the 'blt' instruction.\n   *\n   * Branch to target if less than.\n   *\n   * @const {number}\n   */\n  this.BLT = 0x3F;\n\n  /**\n   * The op-code for the 'blt.s' instruction.\n   *\n   * Branch to target if less than, short form.\n   *\n   * @const {number}\n   */\n  this.BLT_S = 0x32;\n\n  /**\n   * The op-code for the 'blt.un' instruction.\n   *\n   * Branch to target if less than (unsigned or unordered).\n   *\n   * @const {number}\n   */\n  this.BLT_UN = 0x44;\n\n  /**\n   * The op-code for the 'blt.un.s' instruction.\n   *\n   * Branch to target if less than (unsigned or unordered), short form.\n   *\n   * @const {number}\n   */\n  this.BLT_UN_S = 0x37;\n\n  /**\n   * The op-code for the 'bne.un' instruction.\n   *\n   * Branch to target if unequal or unordered.\n   *\n   * @const {number}\n   */\n  this.BNE_UN = 0x40;\n\n  /**\n   * The op-code for the 'bne.un.s' instruction.\n   *\n   * Branch to target if unequal or unordered, short form.\n   *\n   * @const {number}\n   */\n  this.BNE_UN_S = 0x33;\n\n  /**\n   * The op-code for the 'box' instruction.\n   *\n   * Convert a boxable value to its boxed form.\n   *\n   * @const {number}\n   */\n  this.BOX = 0x8C;\n\n  /**\n   * The op-code for the 'br' instruction.\n   *\n   * Branch to target.\n   *\n   * @const {number}\n   */\n  this.BR = 0x38;\n\n  /**\n   * The op-code for the 'br.s' instruction.\n   *\n   * Branch to target, short form.\n   *\n   * @const {number}\n   */\n  this.BR_S = 0x2B;\n\n  /**\n   * The op-code for the 'break' instruction.\n   *\n   * Inform a debugger that a breakpoint has been reached.\n   *\n   * @const {number}\n   */\n  this.BREAK = 0x01;\n\n  /**\n   * The op-code for the 'brfalse' instruction.\n   *\n   * Branch to target if value is zero (false).\n   *\n   * @const {number}\n   */\n  this.BRFALSE = 0x39;\n\n  /**\n   * The op-code for the 'brfalse.s' instruction.\n   *\n   * Branch to target if value is zero (false), short form.\n   *\n   * @const {number}\n   */\n  this.BRFALSE_S = 0x2C;\n\n  /**\n   * The op-code for the 'brinst' instruction.\n   *\n   * Branch to target if value is a non-null object reference (alias for\n   * brtrue).\n   *\n   * @const {number}\n   */\n  this.BRINST = 0x3A;\n\n  /**\n   * The op-code for the 'brinst.s' instruction.\n   *\n   * Branch to target if value is a non-null object reference, short form (alias\n   * for brtrue.s).\n   *\n   * @const {number}\n   */\n  this.BRINST_S = 0x2D;\n\n  /**\n   * The op-code for the 'brnull' instruction.\n   *\n   * Branch to target if value is null (alias for brfalse).\n   *\n   * @const {number}\n   */\n  this.BRNULL = 0x39;\n\n  /**\n   * The op-code for the 'brnull.s' instruction.\n   *\n   * Branch to target if value is null (alias for brfalse.s), short form.\n   *\n   * @const {number}\n   */\n  this.BRNULL_S = 0x2C;\n\n  /**\n   * The op-code for the 'brtrue' instruction.\n   *\n   * Branch to target if value is non-zero (true).\n   *\n   * @const {number}\n   */\n  this.BRTRUE = 0x3A;\n\n  /**\n   * The op-code for the 'brtrue.s' instruction.\n   *\n   * Branch to target if value is non-zero (true), short form.\n   *\n   * @const {number}\n   */\n  this.BRTRUE_S = 0x2D;\n\n  /**\n   * The op-code for the 'brzero' instruction.\n   *\n   * Branch to target if value is zero (alias for brfalse).\n   *\n   * @const {number}\n   */\n  this.BRZERO = 0x39;\n\n  /**\n   * The op-code for the 'brzero.s' instruction.\n   *\n   * Branch to target if value is zero (alias for brfalse.s), short form.\n   *\n   * @const {number}\n   */\n  this.BRZERO_S = 0x2C;\n\n  /**\n   * The op-code for the 'call' instruction.\n   *\n   * Call method described by method.\n   *\n   * @const {number}\n   */\n  this.CALL = 0x28;\n\n  /**\n   * The op-code for the 'calli' instruction.\n   *\n   * Call method indicated on the stack with arguments described by\n   * callsitedescr.\n   *\n   * @const {number}\n   */\n  this.CALLI = 0x29;\n\n  /**\n   * The op-code for the 'callvirt' instruction.\n   *\n   * Call a method associated with an object.\n   *\n   * @const {number}\n   */\n  this.CALLVIRT = 0x6F;\n\n  /**\n   * The op-code for the 'castclass' instruction.\n   *\n   * Cast obj to class.\n   *\n   * @const {number}\n   */\n  this.CASTCLASS = 0x74;\n\n  /**\n   * The op-code for the 'ceq' instruction.\n   *\n   * Push 1 (of type int32) if value1 equals value2, else push 0.\n   *\n   * @const {number}\n   */\n  this.CEQ = 0xFE01;\n\n  /**\n   * The op-code for the 'cgt' instruction.\n   *\n   * Push 1 (of type int32) if value1 > value2, else push 0.\n   *\n   * @const {number}\n   */\n  this.CGT = 0xFE02;\n\n  /**\n   * The op-code for the 'cgt.un' instruction.\n   *\n   * Push 1 (of type int32) if value1 > value2, unsigned or unordered, else push\n   * 0.\n   *\n   * @const {number}\n   */\n  this.CGT_UN = 0xFE03;\n\n  /**\n   * The op-code for the 'ckfinite' instruction.\n   *\n   * Throw ArithmeticException if value is not a finite number.\n   *\n   * @const {number}\n   */\n  this.CKFINITE = 0xC3;\n\n  /**\n   * The op-code for the 'clt' instruction.\n   *\n   * Push 1 (of type int32) if value1 < value2, else push 0.\n   *\n   * @const {number}\n   */\n  this.CLT = 0xFE04;\n\n  /**\n   * The op-code for the 'clt.un' instruction.\n   *\n   * Push 1 (of type int32) if value1 < value2, unsigned or unordered, else push\n   * 0.\n   *\n   * @const {number}\n   */\n  this.CLT_UN = 0xFE05;\n\n  /**\n   * The op-code for the 'constrained' instruction.\n   *\n   * Call a virtual method on a type constrained to be type T.\n   *\n   * @const {number}\n   */\n  this.CONSTRAINED = 0xFE16;\n\n  /**\n   * The op-code for the 'conv.i' instruction.\n   *\n   * Convert to native int, pushing native int on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_I = 0xD3;\n\n  /**\n   * The op-code for the 'conv.i1' instruction.\n   *\n   * Convert to int8, pushing int32 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_I1 = 0x67;\n\n  /**\n   * The op-code for the 'conv.i2' instruction.\n   *\n   * Convert to int16, pushing int32 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_I2 = 0x68;\n\n  /**\n   * The op-code for the 'conv.i4' instruction.\n   *\n   * Convert to int32, pushing int32 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_I4 = 0x69;\n\n  /**\n   * The op-code for the 'conv.i8' instruction.\n   *\n   * Convert to int64, pushing int64 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_I8 = 0x6A;\n\n  /**\n   * The op-code for the 'conv.ovf.i' instruction.\n   *\n   * Convert to a native int (on the stack as native int) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I = 0xD4;\n\n  /**\n   * The op-code for the 'conv.ovf.i.un' instruction.\n   *\n   * Convert unsigned to a native int (on the stack as native int) and throw an\n   * exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I_UN = 0x8A;\n\n  /**\n   * The op-code for the 'conv.ovf.i1' instruction.\n   *\n   * Convert to an int8 (on the stack as int32) and throw an exception on\n   * overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I1 = 0xB3;\n\n  /**\n   * The op-code for the 'conv.ovf.i1.un' instruction.\n   *\n   * Convert unsigned to an int8 (on the stack as int32) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I1_UN = 0x82;\n\n  /**\n   * The op-code for the 'conv.ovf.i2' instruction.\n   *\n   * Convert to an int16 (on the stack as int32) and throw an exception on\n   * overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I2 = 0xB5;\n\n  /**\n   * The op-code for the 'conv.ovf.i2.un' instruction.\n   *\n   * Convert unsigned to an int16 (on the stack as int32) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I2_UN = 0x83;\n\n  /**\n   * The op-code for the 'conv.ovf.i4' instruction.\n   *\n   * Convert to an int32 (on the stack as int32) and throw an exception on\n   * overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I4 = 0xB7;\n\n  /**\n   * The op-code for the 'conv.ovf.i4.un' instruction.\n   *\n   * Convert unsigned to an int32 (on the stack as int32) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I4_UN = 0x84;\n\n  /**\n   * The op-code for the 'conv.ovf.i8' instruction.\n   *\n   * Convert to an int64 (on the stack as int64) and throw an exception on\n   * overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I8 = 0xB7;\n\n  /**\n   * The op-code for the 'conv.ovf.i8.un' instruction.\n   *\n   * Convert unsigned to an int64 (on the stack as int64) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_I8_UN = 0x84;\n\n  /**\n   * The op-code for the 'conv.ovf.u' instruction.\n   *\n   * Convert to a native unsigned int (on the stack as native int) and throw an\n   * exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U = 0xD5;\n\n  /**\n   * The op-code for the 'conv.ovf.u.un' instruction.\n   *\n   * Convert unsigned to a native unsigned int (on the stack as native int) and\n   * throw an exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U_UN = 0x8B;\n\n  /**\n   * The op-code for the 'conv.ovf.u1' instruction.\n   *\n   * Convert to an unsigned int8 (on the stack as int32) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U1 = 0xB4;\n\n  /**\n   * The op-code for the 'conv.ovf.u1.un' instruction.\n   *\n   * Convert unsigned to an unsigned int8 (on the stack as int32) and throw an\n   * exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U1_UN = 0x86;\n\n  /**\n   * The op-code for the 'conv.ovf.u2' instruction.\n   *\n   * Convert to an unsigned int16 (on the stack as int32) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U2 = 0xB6;\n\n  /**\n   * The op-code for the 'conv.ovf.u2.un' instruction.\n   *\n   * Convert unsigned to an unsigned int16 (on the stack as int32) and throw an\n   * exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U2_UN = 0x87;\n\n  /**\n   * The op-code for the 'conv.ovf.u4' instruction.\n   *\n   * Convert to an unsigned int32 (on the stack as int32) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U4 = 0xB8;\n\n  /**\n   * The op-code for the 'conv.ovf.u4.un' instruction.\n   *\n   * Convert unsigned to an unsigned int32 (on the stack as int32) and throw an\n   * exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U4_UN = 0x88;\n\n  /**\n   * The op-code for the 'conv.ovf.u8' instruction.\n   *\n   * Convert to an unsigned int64 (on the stack as int64) and throw an exception\n   * on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U8 = 0xBA;\n\n  /**\n   * The op-code for the 'conv.ovf.u8.un' instruction.\n   *\n   * Convert unsigned to an unsigned int64 (on the stack as int64) and throw an\n   * exception on overflow.\n   *\n   * @const {number}\n   */\n  this.CONV_OVF_U8_UN = 0x89;\n\n  /**\n   * The op-code for the 'conv.r.un' instruction.\n   *\n   * Convert unsigned integer to floating-point, pushing F on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_R_UN = 0x76;\n\n  /**\n   * The op-code for the 'conv.r4' instruction.\n   *\n   * Convert to float32, pushing F on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_R4 = 0x6B;\n\n  /**\n   * The op-code for the 'conv.r8' instruction.\n   *\n   * Convert to float64, pushing F on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_R8 = 0x6C;\n\n  /**\n   * The op-code for the 'conv.u' instruction.\n   *\n   * Convert to native unsigned int, pushing native int on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_U = 0xE0;\n\n  /**\n   * The op-code for the 'conv.u1' instruction.\n   *\n   * Convert to unsigned int8, pushing int32 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_U1 = 0xD2;\n\n  /**\n   * The op-code for the 'conv.u2' instruction.\n   *\n   * Convert to unsigned int16, pushing int32 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_U2 = 0xD1;\n\n  /**\n   * The op-code for the 'conv.u4' instruction.\n   *\n   * Convert to unsigned int32, pushing int32 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_U4 = 0x6D;\n\n  /**\n   * The op-code for the 'conv.u8' instruction.\n   *\n   * Convert to unsigned int64, pushing int64 on stack.\n   *\n   * @const {number}\n   */\n  this.CONV_U8 = 0x6E;\n\n  /**\n   * The op-code for the 'cpblk' instruction.\n   *\n   * Copy data from memory to memory.\n   *\n   * @const {number}\n   */\n  this.CPBLK = 0xFE17;\n\n  /**\n   * The op-code for the 'cpobj' instruction.\n   *\n   * Copy a value type from src to dest.\n   *\n   * @const {number}\n   */\n  this.CPOBJ = 0x70;\n\n  /**\n   * The op-code for the 'div' instruction.\n   *\n   * Divide two values to return a quotient or floating-point result.\n   *\n   * @const {number}\n   */\n  this.DIV = 0x5B;\n\n  /**\n   * The op-code for the 'div.un' instruction.\n   *\n   * Divide two values, unsigned, returning a quotient.\n   *\n   * @const {number}\n   */\n  this.DIV_UN = 0x5C;\n\n  /**\n   * The op-code for the 'dup' instruction.\n   *\n   * Duplicate the value on the top of the stack.\n   *\n   * @const {number}\n   */\n  this.DUP = 0x25;\n\n  /**\n   * The op-code for the 'endfault' instruction.\n   *\n   * End fault clause of an exception block.\n   *\n   * @const {number}\n   */\n  this.ENDFAULT = 0xDC;\n\n  /**\n   * The op-code for the 'endfilter' instruction.\n   *\n   * End an exception handling filter clause.\n   *\n   * @const {number}\n   */\n  this.ENDFILTER = 0xFE11;\n\n  /**\n   * The op-code for the 'endfinally' instruction.\n   *\n   * End an exception handling filter clause.\n   *\n   * @const {number}\n   */\n  this.ENDFINALLY = 0xDC;\n\n  /**\n   * The op-code for the 'initblk' instruction.\n   *\n   * Initialize the value at address dest.\n   *\n   * @const {number}\n   */\n  this.INITBLK = 0xFE18;\n\n  /**\n   * The op-code for the 'initobj' instruction.\n   *\n   * Initialize the value at address dest.\n   *\n   * @const {number}\n   */\n  this.INITOBJ = 0xFE15;\n\n  /**\n   * The op-code for the 'isinst' instruction.\n   *\n   * Test if obj is an instance of class, returning null or an instance of that\n   * class or interface.\n   *\n   * @const {number}\n   */\n  this.ISINST = 0x75;\n\n  /**\n   * The op-code for the 'jmp' instruction.\n   *\n   * Exit current method and jump to the specified method.\n   *\n   * @const {number}\n   */\n  this.JMP = 0x75;\n\n  /**\n   * The op-code for the 'ldarg' instruction.\n   *\n   * Load argument numbered num onto the stack.\n   *\n   * @const {number}\n   */\n  this.LDARG = 0xFE09;\n\n  /**\n   * The op-code for the 'ldarg.0' instruction.\n   *\n   * Load argument 0 onto the stack.\n   *\n   * @const {number}\n   */\n  this.LDARG_0 = 0x02;\n\n  /**\n   * The op-code for the 'ldarg.1' instruction.\n   *\n   * Load argument 1 onto the stack.\n   *\n   * @const {number}\n   */\n  this.LDARG_1 = 0x03;\n\n  /**\n   * The op-code for the 'ldarg.2' instruction.\n   *\n   * Load argument 2 onto the stack.\n   *\n   * @const {number}\n   */\n  this.LDARG_2 = 0x04;\n\n  /**\n   * The op-code for the 'ldarg.3' instruction.\n   *\n   * Load argument 3 onto the stack.\n   *\n   * @const {number}\n   */\n  this.LDARG_3 = 0x05;\n\n  /**\n   * The op-code for the 'ldarg.s' instruction.\n   *\n   * Load argument numbered num onto the stack, short form.\n   *\n   * @const {number}\n   */\n  this.LDARG_S = 0x0E;\n\n  /**\n   * The op-code for the 'ldarga' instruction.\n   *\n   * Fetch the address of argument argNum.\n   *\n   * @const {number}\n   */\n  this.LDARGA = 0xFE0A;\n\n  /**\n   * The op-code for the 'ldarga.s' instruction.\n   *\n   * Fetch the address of argument argNum, short form.\n   *\n   * @const {number}\n   */\n  this.LDARGA_S = 0x0F;\n\n  /**\n   * The op-code for the 'ldc.i4' instruction.\n   *\n   * Push num of type int32 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4 = 0x20;\n\n  /**\n   * The op-code for the 'ldc.i4.0' instruction.\n   *\n   * Push 0 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_0 = 0x16;\n\n  /**\n   * The op-code for the 'ldc.i4.1' instruction.\n   *\n   * Push 1 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_1 = 0x17;\n\n  /**\n   * The op-code for the 'ldc.i4.2' instruction.\n   *\n   * Push 2 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_2 = 0x18;\n\n  /**\n   * The op-code for the 'ldc.i4.3' instruction.\n   *\n   * Push 3 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_3 = 0x19;\n\n  /**\n   * The op-code for the 'ldc.i4.4' instruction.\n   *\n   * Push 4 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_4 = 0x1A;\n\n  /**\n   * The op-code for the 'ldc.i4.5' instruction.\n   *\n   * Push 5 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_5 = 0x1B;\n\n  /**\n   * The op-code for the 'ldc.i4.6' instruction.\n   *\n   * Push 6 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_6 = 0x1C;\n\n  /**\n   * The op-code for the 'ldc.i4.7' instruction.\n   *\n   * Push 7 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_7 = 0x1D;\n\n  /**\n   * The op-code for the 'ldc.i4.8' instruction.\n   *\n   * Push 8 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_8 = 0x1E;\n\n  /**\n   * The op-code for the 'ldc.i4.m1' instruction.\n   *\n   * Push -1 onto the stack as int32.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_M1 = 0x15;\n\n  /**\n   * The op-code for the 'ldc.i4.s' instruction.\n   *\n   * Push num onto the stack as int32, short form.\n   *\n   * @const {number}\n   */\n  this.LDC_I4_S = 0x1F;\n\n  /**\n   * The op-code for the 'ldc.i8' instruction.\n   *\n   * Push num of type int64 onto the stack as int64.\n   *\n   * @const {number}\n   */\n  this.LDC_I8 = 0x21;\n\n  /**\n   * The op-code for the 'ldc.r4' instruction.\n   *\n   * Push num of type float32 onto the stack as F.\n   *\n   * @const {number}\n   */\n  this.LDC_R4 = 0x22;\n\n  /**\n   * The op-code for the 'ldc.r8' instruction.\n   *\n   * Push num of type float64 onto the stack as F.\n   *\n   * @const {number}\n   */\n  this.LDC_R8 = 0x23;\n\n  /**\n   * The op-code for the 'ldelem' instruction.\n   *\n   * Load the element at index onto the top of the stack.\n   *\n   * @const {number}\n   */\n  this.LDELEM = 0xA3;\n\n  /**\n   * The op-code for the 'ldelem.i' instruction.\n   *\n   * Load the element with type native int at index onto the top of the stack as\n   * a native int.\n   *\n   * @const {number}\n   */\n  this.LDELEM_I = 0x97;\n\n  /**\n   * The op-code for the 'ldelem.i1' instruction.\n   *\n   * Load the element with type int8 at index onto the top of the stack as an\n   * int32.\n   *\n   * @const {number}\n   */\n  this.LDELEM_I1 = 0x90;\n\n  /**\n   * The op-code for the 'ldelem.i2' instruction.\n   *\n   * Load the element with type int16 at index onto the top of the stack as an\n   * int32.\n   *\n   * @const {number}\n   */\n  this.LDELEM_I2 = 0x92;\n\n  /**\n   * The op-code for the 'ldelem.i4' instruction.\n   *\n   * Load the element with type int32 at index onto the top of the stack as an\n   * int32.\n   *\n   * @const {number}\n   */\n  this.LDELEM_I4 = 0x94;\n\n  /**\n   * The op-code for the 'ldelem.i8' instruction.\n   *\n   * Load the element with type int64 at index onto the top of the stack as an\n   * int64.\n   *\n   * @const {number}\n   */\n  this.LDELEM_I8 = 0x96;\n\n  /**\n   * The op-code for the 'ldelem.r4' instruction.\n   *\n   * Load the element with type float32 at index onto the top of the stack as an\n   * F.\n   *\n   * @const {number}\n   */\n  this.LDELEM_R4 = 0x98;\n\n  /**\n   * The op-code for the 'ldelem.r8' instruction.\n   *\n   * Load the element with type float64 at index onto the top of the stack as an\n   * F.\n   *\n   * @const {number}\n   */\n  this.LDELEM_R8 = 0x99;\n\n  /**\n   * The op-code for the 'ldelem.ref' instruction.\n   *\n   * Load the element at index onto the top of the stack as an O. The type of\n   * the O is the same as the element type of the array pushed on the CIL stack.\n   *\n   * @const {number}\n   */\n  this.LDELEM_REF = 0x9A;\n\n  /**\n   * The op-code for the 'ldelem.u1' instruction.\n   *\n   * Load the element with type unsigned int8 at index onto the top of the stack\n   * as an int32.\n   *\n   * @const {number}\n   */\n  this.LDELEM_U1 = 0x91;\n\n  /**\n   * The op-code for the 'ldelem.u2' instruction.\n   *\n   * Load the element with type unsigned int16 at index onto the top of the\n   * stack as an int32.\n   *\n   * @const {number}\n   */\n  this.LDELEM_U2 = 0x93;\n\n  /**\n   * The op-code for the 'ldelem.u4' instruction.\n   *\n   * Load the element with type unsigned int32 at index onto the top of the\n   * stack as an int32.\n   *\n   * @const {number}\n   */\n  this.LDELEM_U4 = 0x95;\n\n  /**\n   * The op-code for the 'ldelem.u8' instruction.\n   *\n   * Load the element with type unsigned int64 at index onto the top of the\n   * stack as an int64 (alias for ldelem.i8).\n   *\n   * @const {number}\n   */\n  this.LDELEM_U8 = 0x96;\n\n  /**\n   * The op-code for the 'ldelema' instruction.\n   *\n   * Load the address of element at index onto the top of the stack.\n   *\n   * @const {number}\n   */\n  this.LDELEMA = 0x8F;\n\n  /**\n   * The op-code for the 'ldfld' instruction.\n   *\n   * Push the value of field of object (or value type) obj, onto the stack.\n   *\n   * @const {number}\n   */\n  this.LDFLD = 0x7B;\n\n  /**\n   * The op-code for the 'ldflda' instruction.\n   *\n   * Push the address of field of object obj on the stack.\n   *\n   * @const {number}\n   */\n  this.LDFLDA = 0x7C;\n\n  /**\n   * The op-code for the 'ldftn' instruction.\n   *\n   * Push a pointer to a method referenced by method, on the stack.\n   *\n   * @const {number}\n   */\n  this.LDFTN = 0xFE06;\n\n  /**\n   * The op-code for the 'ldind.i' instruction.\n   *\n   * Indirect load value of type native int as native int on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_I = 0x4D;\n\n  /**\n   * The op-code for the 'ldind.i1' instruction.\n   *\n   * Indirect load value of type int8 as int32 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_I1 = 0x46;\n\n  /**\n   * The op-code for the 'ldind.i2' instruction.\n   *\n   * Indirect load value of type int16 as int32 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_I2 = 0x48;\n\n  /**\n   * The op-code for the 'ldind.i4' instruction.\n   *\n   * Indirect load value of type int32 as int32 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_I4 = 0x4A;\n\n  /**\n   * The op-code for the 'ldind.i8' instruction.\n   *\n   * Indirect load value of type int64 as int64 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_I8 = 0x4C;\n\n  /**\n   * The op-code for the 'ldind.r4' instruction.\n   *\n   * Indirect load value of type float32 as F on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_R4 = 0x4E;\n\n  /**\n   * The op-code for the 'ldind.r8' instruction.\n   *\n   * Indirect load value of type float64 as F on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_R8 = 0x4F;\n\n  /**\n   * The op-code for the 'ldind.ref' instruction.\n   *\n   * Indirect load value of type object ref as O on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_REF = 0x50;\n\n  /**\n   * The op-code for the 'ldind.u1' instruction.\n   *\n   * Indirect load value of type unsigned int8 as int32 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_U1 = 0x47;\n\n  /**\n   * The op-code for the 'ldind.u2' instruction.\n   *\n   * Indirect load value of type unsigned int16 as int32 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_U2 = 0x49;\n\n  /**\n   * The op-code for the 'ldind.u4' instruction.\n   *\n   * Indirect load value of type unsigned int32 as int32 on the stack.\n   *\n   * @const {number}\n   */\n  this.LDIND_U4 = 0x4B;\n\n  /**\n   * The op-code for the 'ldind.u8' instruction.\n   *\n   * Indirect load value of type unsigned int64 as int64 on the stack (alias for\n   * ldind.i8).\n   *\n   * @const {number}\n   */\n  this.LDIND_U8 = 0x4C;\n\n  /**\n   * The op-code for the 'ldlen' instruction.\n   *\n   * Push the length (of type native unsigned int) of array on the stack.\n   *\n   * @const {number}\n   */\n  this.LDLEN = 0x8E;\n\n  /**\n   * The op-code for the 'ldloc' instruction.\n   *\n   * Load local variable of index indx onto stack.\n   *\n   * @const {number}\n   */\n  this.LDLOC = 0xFE0C;\n\n  /**\n   * The op-code for the 'ldloc.0' instruction.\n   *\n   * Load local variable 0 onto stack.\n   *\n   * @const {number}\n   */\n  this.LDLOC_0 = 0x06;\n\n  /**\n   * The op-code for the 'ldloc.1' instruction.\n   *\n   * Load local variable 1 onto stack.\n   *\n   * @const {number}\n   */\n  this.LDLOC_1 = 0x07;\n\n  /**\n   * The op-code for the 'ldloc.2' instruction.\n   *\n   * Load local variable 2 onto stack.\n   *\n   * @const {number}\n   */\n  this.LDLOC_1 = 0x08;\n\n  /**\n   * The op-code for the 'ldloc.3' instruction.\n   *\n   * Load local variable 3 onto stack.\n   *\n   * @const {number}\n   */\n  this.LDLOC_1 = 0x09;\n\n  /**\n   * The op-code for the 'ldloc.s' instruction.\n   *\n   * Load local variable of index indx onto stack, short form.\n   *\n   * @const {number}\n   */\n  this.LDLOC_S = 0x11;\n\n  /**\n   * The op-code for the 'ldloca' instruction.\n   *\n   * Load address of local variable with index indx.\n   *\n   * @const {number}\n   */\n  this.LDLOCA = 0xFE0D;\n\n  /**\n   * The op-code for the 'ldloca' instruction.\n   *\n   * Load address of local variable with index indx, short form.\n   *\n   * @const {number}\n   */\n  this.LDLOCA_S = 0x12;\n\n  /**\n   * The op-code for the 'ldnull' instruction.\n   *\n   * Push a null reference on the stack.\n   *\n   * @const {number}\n   */\n  this.LDNULL = 0x14;\n\n  /**\n   * The op-code for the 'ldobj' instruction.\n   *\n   * Copy the value stored at address src to the stack.\n   *\n   * @const {number}\n   */\n  this.LDOBJ = 0x71;\n\n  /**\n   * The op-code for the 'ldsfld' instruction.\n   *\n   * Push the value of the static field on the stack.\n   *\n   * @const {number}\n   */\n  this.LDSFLD = 0x7E;\n\n  /**\n   * The op-code for the 'ldsflda' instruction.\n   *\n   * Push the address of the static field, field, on the stack.\n   *\n   * @const {number}\n   */\n  this.LDSFLDA = 0x7F;\n\n  /**\n   * The op-code for the 'ldstr' instruction.\n   *\n   * Push a string object for the literal string.\n   *\n   * @const {number}\n   */\n  this.LDSTR = 0x72;\n\n  /**\n   * The op-code for the 'ldtoken' instruction.\n   *\n   * Convert metadata token to its runtime representation.\n   *\n   * @const {number}\n   */\n  this.LDTOKEN = 0xD0;\n\n  /**\n   * The op-code for the 'ldvirtftn' instruction.\n   *\n   * Push address of virtual method on the stack.\n   *\n   * @const {number}\n   */\n  this.LDVIRTFTN = 0xFE07;\n\n  /**\n   * The op-code for the 'leave' instruction.\n   *\n   * Exit a protected region of code.\n   *\n   * @const {number}\n   */\n  this.LEAVE = 0xDD;\n\n  /**\n   * The op-code for the 'leave.s' instruction.\n   *\n   * Exit a protected region of code, short form.\n   *\n   * @const {number}\n   */\n  this.LEAVE_S = 0xDE;\n\n  /**\n   * The op-code for the 'localloc' instruction.\n   *\n   * Allocate space from the local memory pool.\n   *\n   * @const {number}\n   */\n  this.LOCALLOC = 0xFE0F;\n\n  /**\n   * The op-code for the 'mkrefany' instruction.\n   *\n   * Push a typed reference to ptr of type class onto the stack.\n   *\n   * @const {number}\n   */\n  this.MKREFANY = 0xC6;\n\n  /**\n   * The op-code for the 'mul' instruction.\n   *\n   * Multiply values.\n   *\n   * @const {number}\n   */\n  this.MUL = 0x5A;\n\n  /**\n   * The op-code for the 'mul.ovf' instruction.\n   *\n   * Multiply signed integer values. Signed result shall fit in same size.\n   *\n   * @const {number}\n   */\n  this.MUL_OVF = 0xD8;\n\n  /**\n   * The op-code for the 'mul.ovf.un' instruction.\n   *\n   * Multiply unsigned integer values. Unsigned result shall fit in same size.\n   *\n   * @const {number}\n   */\n  this.MUL_OVF_UN = 0xD9;\n\n  /**\n   * The op-code for the 'neg' instruction.\n   *\n   * Negate value.\n   *\n   * @const {number}\n   */\n  this.NEG = 0x65;\n\n  /**\n   * The op-code for the 'newarr' instruction.\n   *\n   * Create a new array with elements of type etype.\n   *\n   * @const {number}\n   */\n  this.NEWARR = 0x8D;\n\n  /**\n   * The op-code for the 'newobj' instruction.\n   *\n   * Allocate an uninitialized object or value type and call ctor.\n   *\n   * @const {number}\n   */\n  this.NEWOBJ = 0x73;\n\n  /**\n   * The op-code for the 'newobj' instruction.\n   *\n   * The specified fault check(s) normally performed as part of the execution of\n   * the subsequent instruction can/shall be skipped.\n   *\n   * @const {number}\n   */\n  this.NO_TYPE_RANGE_NULL_CHECK = 0xFE19;\n\n  /**\n   * The op-code for the 'nop' instruction.\n   *\n   * Do nothing (No operation).\n   *\n   * @const {number}\n   */\n  this.NOP = 0x00;\n\n  /**\n   * The op-code for the 'not' instruction.\n   *\n   * Bitwise complement (logical not).\n   *\n   * @const {number}\n   */\n  this.NOT = 0x66;\n\n  /**\n   * The op-code for the 'or' instruction.\n   *\n   * Bitwise OR of two integer values, returns an integer.\n   *\n   * @const {number}\n   */\n  this.OR = 0x60;\n\n  /**\n   * The op-code for the 'pop' instruction.\n   *\n   * Pop value from the stack.\n   *\n   * @const {number}\n   */\n  this.POP = 0x26;\n\n  /**\n   * The op-code for the 'readonly' instruction.\n   *\n   * Specify that the subsequent array address operation performs no type check\n   * at runtime, and that it returns a controlled-mutability managed pointer\n   *\n   * @const {number}\n   */\n  this.READONLY = 0xFE1E;\n\n  /**\n   * The op-code for the 'refanytype' instruction.\n   *\n   * Push the type token stored in a typed reference.\n   *\n   * @const {number}\n   */\n  this.REFANYTYPE = 0xFE1D;\n\n  /**\n   * The op-code for the 'refanyval' instruction.\n   *\n   * Push the address stored in a typed reference.\n   *\n   * @const {number}\n   */\n  this.REFANYVAL = 0xC2;\n\n  /**\n   * The op-code for the 'rem' instruction.\n   *\n   * Remainder when dividing one value by another.\n   *\n   * @const {number}\n   */\n  this.REM = 0x5D;\n\n  /**\n   * The op-code for the 'rem.un' instruction.\n   *\n   * Remainder when dividing one unsigned value by another.\n   *\n   * @const {number}\n   */\n  this.REM_UN = 0x5E;\n\n  /**\n   * The op-code for the 'ret' instruction.\n   *\n   * Return from method, possibly with a value.\n   *\n   * @const {number}\n   */\n  this.RET = 0x2A;\n\n  /**\n   * The op-code for the 'rethrow' instruction.\n   *\n   * Rethrow the current exception.\n   *\n   * @const {number}\n   */\n  this.RETHROW = 0xFE1A;\n\n  /**\n   * The op-code for the 'shl' instruction.\n   *\n   * Shift an integer left (shifting in zeros), return an integer.\n   *\n   * @const {number}\n   */\n  this.SHL = 0x62;\n\n  /**\n   * The op-code for the 'shr' instruction.\n   *\n   * Shift an integer right (shift in sign), return an integer.\n   *\n   * @const {number}\n   */\n  this.SHR = 0x63;\n\n  /**\n   * The op-code for the 'shr.un' instruction.\n   *\n   * Shift an integer right (shift in zero), return an integer.\n   *\n   * @const {number}\n   */\n  this.SHR_UN = 0x64;\n\n  /**\n   * The op-code for the 'sizeof' instruction.\n   *\n   * Push the size, in bytes, of a type as an unsigned int32.\n   *\n   * @const {number}\n   */\n  this.SIZEOF = 0xFE1C;\n\n  /**\n   * The op-code for the 'starg' instruction.\n   *\n   * Store value to the argument numbered num.\n   *\n   * @const {number}\n   */\n  this.STARG = 0xFE0B;\n\n  /**\n   * The op-code for the 'starg.s' instruction.\n   *\n   * Store value to the argument numbered num, short form.\n   *\n   * @const {number}\n   */\n  this.STARG_S = 0x10;\n\n  /**\n   * The op-code for the 'stelem' instruction.\n   *\n   * Replace array element at index with the value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM = 0xA4;\n\n  /**\n   * The op-code for the 'stelem.i' instruction.\n   *\n   * Replace array element at index with the i value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_I = 0x9B;\n\n  /**\n   * The op-code for the 'stelem.i1' instruction.\n   *\n   * Replace array element at index with the int8 value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_I1 = 0x9C;\n\n  /**\n   * The op-code for the 'stelem.i2' instruction.\n   *\n   * Replace array element at index with the int16 value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_I2 = 0x9D;\n\n  /**\n   * The op-code for the 'stelem.i4' instruction.\n   *\n   * Replace array element at index with the int32 value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_I4 = 0x9E;\n\n  /**\n   * The op-code for the 'stelem.i8' instruction.\n   *\n   * Replace array element at index with the int64 value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_I8 = 0x9F;\n\n  /**\n   * The op-code for the 'stelem.r4' instruction.\n   *\n   * Replace array element at index with the float32 value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_R4 = 0xA0;\n\n  /**\n   * The op-code for the 'stelem.r8' instruction.\n   *\n   * Replace array element at index with the float64 value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_R8 = 0xA1;\n\n  /**\n   * The op-code for the 'stelem.ref' instruction.\n   *\n   * Replace array element at index with the ref value on the stack.\n   *\n   * @const {number}\n   */\n  this.STELEM_REF = 0xA2;\n\n  /**\n   * The op-code for the 'stfld' instruction.\n   *\n   * Replace the value of field of the object obj with value.\n   *\n   * @const {number}\n   */\n  this.STFLD = 0x7D;\n\n  /**\n   * The op-code for the 'stind.i' instruction.\n   *\n   * Store value of type native int into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_I = 0xDF;\n\n  /**\n   * The op-code for the 'stind.i1' instruction.\n   *\n   * Store value of type int8 into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_I1 = 0x52;\n\n  /**\n   * The op-code for the 'stind.i2' instruction.\n   *\n   * Store value of type int16 into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_I2 = 0x53;\n\n  /**\n   * The op-code for the 'stind.i4' instruction.\n   *\n   * Store value of type int32 into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_I4 = 0x54;\n\n  /**\n   * The op-code for the 'stind.i8' instruction.\n   *\n   * Store value of type int64 into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_I8 = 0x55;\n\n  /**\n   * The op-code for the 'stind.r4' instruction.\n   *\n   * Store value of type float32 into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_R4 = 0x56;\n\n  /**\n   * The op-code for the 'stind.r8' instruction.\n   *\n   * Store value of type float64 into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_R8 = 0x57;\n\n  /**\n   * The op-code for the 'stind.ref' instruction.\n   *\n   * Store value of type object ref (type O) into memory at address.\n   *\n   * @const {number}\n   */\n  this.STIND_REF = 0x51;\n\n  /**\n   * The op-code for the 'stloc' instruction.\n   *\n   * Pop a value from stack into local variable indx.\n   *\n   * @const {number}\n   */\n  this.STLOC = 0xFE0E;\n\n  /**\n   * The op-code for the 'stloc.0' instruction.\n   *\n   * Pop a value from stack into local variable 0.\n   *\n   * @const {number}\n   */\n  this.STLOC_0 = 0x0A;\n\n  /**\n   * The op-code for the 'stloc.1' instruction.\n   *\n   * Pop a value from stack into local variable 1.\n   *\n   * @const {number}\n   */\n  this.STLOC_1 = 0x0B;\n\n  /**\n   * The op-code for the 'stloc.2' instruction.\n   *\n   * Pop a value from stack into local variable 2.\n   *\n   * @const {number}\n   */\n  this.STLOC_2 = 0x0C;\n\n  /**\n   * The op-code for the 'stloc.3' instruction.\n   *\n   * Pop a value from stack into local variable 3.\n   *\n   * @const {number}\n   */\n  this.STLOC_3 = 0x0D;\n\n  /**\n   * The op-code for the 'stloc.s' instruction.\n   *\n   * Pop a value from stack into local variable indx, short form.\n   *\n   * @const {number}\n   */\n  this.STLOC_S = 0x13;\n\n  /**\n   * The op-code for the 'stobj' instruction.\n   *\n   * Store a value of type typeTok at an address.\n   *\n   * @const {number}\n   */\n  this.STOBJ = 0x81;\n\n  /**\n   * The op-code for the 'stsfld' instruction.\n   *\n   * Replace the value of the static field with val.\n   *\n   * @const {number}\n   */\n  this.STSFLD = 0x80;\n\n  /**\n   * The op-code for the 'sub' instruction.\n   *\n   * Subtract value2 from value1, returning a new value.\n   *\n   * @const {number}\n   */\n  this.SUB = 0x59;\n\n  /**\n   * The op-code for the 'sub.ovf' instruction.\n   *\n   * Subtract native int from a native int. Signed result shall fit in same\n   * size.\n   *\n   * @const {number}\n   */\n  this.SUB_OVF = 0xDA;\n\n  /**\n   * The op-code for the 'sub.ovf.un' instruction.\n   *\n   * Subtract native unsigned int from a native unsigned int. Unsigned result\n   * shall fit in same size.\n   *\n   * @const {number}\n   */\n  this.SUB_OVF_UN = 0xDB;\n\n  /**\n   * The op-code for the 'switch' instruction.\n   *\n   * Jump to one of n values.\n   *\n   * @const {number}\n   */\n  this.SWITCH = 0x45;\n\n  /**\n   * The op-code for the 'tail' instruction.\n   *\n   * Subsequent call terminates current method.\n   *\n   * @const {number}\n   */\n  this.TAIL = 0xFE14;\n\n  /**\n   * The op-code for the 'throw' instruction.\n   *\n   * Throw an exception.\n   *\n   * @const {number}\n   */\n  this.THROW = 0x7A;\n\n  /**\n   * The op-code for the 'unaligned' instruction.\n   *\n   * Subsequent pointer instruction might be unaligned.\n   *\n   * @const {number}\n   */\n  this.UNALIGNED = 0xFE12;\n\n  /**\n   * The op-code for the 'unbox' instruction.\n   *\n   * Extract a value-type from obj, its boxed representation.\n   *\n   * @const {number}\n   */\n  this.UNBOX = 0x79;\n\n  /**\n   * The op-code for the 'unbox.any' instruction.\n   *\n   * Extract a value-type from obj, its boxed representation.\n   *\n   * @const {number}\n   */\n  this.UNBOX_ANY = 0xA5;\n\n  /**\n   * The op-code for the 'volatile' instruction.\n   *\n   * Subsequent pointer reference is volatile.\n   *\n   * @const {number}\n   */\n  this.VOLATILE = 0xFE13;\n\n  /**\n   * The op-code for the 'xor' instruction.\n   *\n   * Bitwise XOR of integer values, returns an integer.\n   *\n   * @const {number}\n   */\n  this.XOR = 0x61;\n\n}\n\nmodule.exports = new OpCodes();\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar CustomException = require('./CustomException');\nvar Extend = require('extend');\n\n/**\n * Class NotImplementedException.\n *\n * @param {string} message\n *   The message.\n *\n * @constructor\n * @extends {CustomException}\n */\nfunction NotImplementedException (message) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new CustomException(message, 'NotImplementedException'));\n\n}\n\nmodule.exports = NotImplementedException;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class ResourceDirectory.\n *\n * @param {PEParser} reader\n *   The PE reader.\n *\n * @constructor\n * @struct\n */\nfunction ResourceDirectory (reader) {\n\n  'use strict';\n\n  /**\n   * The characteristics.\n   *\n   * @type {number}\n   */\n  this.characteristics = reader.readUInt(4);\n\n  /**\n   * The time/date stamp describing the creation time of the resource.\n   *\n   * @type {number}\n   */\n  this.timeDateStamp = reader.readUInt(4);\n\n  /**\n   * The major version number.\n   *\n   * @type {number}\n   */\n  this.majorVersion = reader.readUInt(2);\n\n  /**\n   * The minor version number.\n   *\n   * @type {number}\n   */\n  this.minorVersion = reader.readUInt(2);\n\n  /**\n   * The number of array elements that use names and that follow this structure.\n   *\n   * @type {number}\n   */\n  this.numberOfNamedEntries = reader.readUInt(2);\n\n  /**\n   * The number of array elements that use integer IDs, and which follow this\n   * structure.\n   *\n   * @type {number}\n   */\n  this.numberOfIdEntries = reader.readUInt(2);\n\n  /**\n   * The resource directory entries.\n   *\n   * @type {Array<ResourceDirectoryEntry>}\n   */\n  this.entries = new Array(this.numberOfIdEntries + this.numberOfNamedEntries);\n\n  // Parse the resource directory entries.\n  var position = reader.getPosition();\n\n  for (var i = 0; i < this.entries.length; i++) {\n    reader.setPosition(position + (i * 8));\n    this.entries[i] = new ResourceDirectoryEntry(reader);\n  }\n\n}\n\nmodule.exports = ResourceDirectory;\n\nvar ResourceDirectoryEntry = require('./../Entry/ResourceDirectoryEntry');\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class ImageAttributes.\n *\n * @constructor\n * @struct\n */\nfunction ImageAttributes () {\n\n  'use strict';\n\n  /**\n   * The DOS header signature.\n   *\n   * @const {number}\n   */\n  this.IMAGE_DOS_SIGNATURE = 0x5a4d;\n\n  /**\n   * The file is an executable image.\n   *\n   * @const {number}\n   */\n  this.IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b;\n\n  /**\n   * The file is an executable image.\n   *\n   * @const {number}\n   */\n  this.IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b;\n\n  /**\n   * The NT header signature.\n   *\n   * @const {number}\n   */\n  this.IMAGE_NT_SIGNATURE = 0x4550;\n\n  /**\n   * The file is a ROM image.\n   *\n   * @const {number}\n   */\n  this.IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107;\n\n}\n\nmodule.exports = new ImageAttributes();\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Extend = require('extend');\nvar MethodOperation = require('../MethodOperation');\nvar RowReference = require('../../Reference/RowReference');\n\n/**\n * Class TokenOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @extends {MethodOperation}\n */\nfunction TokenOperation (parser, code, name) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new MethodOperation(parser, code, name));\n\n  /**\n   * The token.\n   *\n   * @type {number}\n   */\n  this.token = new RowReference(parser, []);\n\n}\n\nmodule.exports = TokenOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class CustomException.\n *\n * @param {string} message\n *   The message.\n * @param {string} type\n *   The type of exception.\n *\n * @constructor\n */\nfunction CustomException (message, type) {\n\n  'use strict';\n\n  /**\n   * The exception message.\n   *\n   * @type {string}\n   *\n   * @private\n   */\n  this._message = message;\n\n  /**\n   * The exception type.\n   *\n   * @type {string}\n   *\n   * @private\n   */\n  this._type = (typeof type !== 'undefined') ? type : 'CustomException';\n\n  /**\n   * Retrieves the exception message.\n   *\n   * @return {string}\n   */\n  this.getMessage = function () {\n    return this._message;\n  };\n\n  /**\n   * Retrieves the exception type.\n   *\n   * @return {string}\n   */\n  this.getType = function () {\n    return this._type;\n  };\n\n  /**\n   * Converts the exception to a string.\n   *\n   * @return {string}\n   */\n  this.toString = function () {\n    return this.getMessage();\n  };\n\n}\n\nmodule.exports = CustomException;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class DataDirectoryHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction DataDirectoryHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The relative virtual address of the table.\n   *\n   * @type {number}\n   */\n  this.virtualAddress = reader.readUInt(4);\n\n  /**\n   * The size of the table, in bytes.\n   *\n   * @type {number}\n   */\n  this.size = reader.readUInt(4);\n\n}\n\nmodule.exports = DataDirectoryHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar NotImplementedException = require('./../Exception/NotImplementedException');\n\n/**\n * Class Module.\n *\n * @param {CILParser} reader\n *   The CLR reader.\n *\n * @constructor\n */\nfunction Module (reader) {\n\n  'use strict';\n\n  /**\n   * The blobs.\n   *\n   * @type {Object<number, Blob>}\n   *\n   * @protected\n   */\n  this._blob = {};\n\n  /**\n   * The GUIDs.\n   *\n   * @type {Object<number, string>}\n   *\n   * @protected\n   */\n  this._guid = {};\n\n  /**\n   * The ANSI strings.\n   *\n   * @type {Object<number, string>}\n   *\n   * @protected\n   */\n  this._strings = {};\n\n  /**\n   * The tables.\n   *\n   * @type {Object<number, *>}\n   *\n   * @protected\n   */\n  this._tables = {};\n\n  /**\n   * The unicode strings.\n   *\n   * @type {Object<number, string>}\n   *\n   * @protected\n   */\n  this._unicodeStrings = {};\n\n  /**\n   * Runs the module.\n   */\n  this.run = function () {\n    throw new NotImplementedException(\n      'The run() function has not been implemented');\n  };\n\n}\n\nmodule.exports = Module;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Module = require('./Module');\nvar NotImplementedException = require('./../Exception/NotImplementedException');\n\n/**\n * Class Compiler.\n *\n * @param {CILParser} parser\n *   The CLR parser.\n *\n * @constructor\n */\nfunction Compiler (parser) {\n\n  'use strict';\n\n  /**\n   * Compiles CIL to JavaScript.\n   *\n   * @return {Module}\n   *   Returns the compiled module object.\n   *\n   * @throws {NotImplementedException}\n   *   Thrown as long as the function has not been fully implemented.\n   */\n  this.compile = function () {\n    // Log some information about the executable.\n    console.log(parser.readDOSHeader());\n    console.log(parser.readCOFFHeader());\n    console.log(parser.readOptionalHeader());\n    console.log(parser.readSectionHeaders());\n    console.log(parser.readResourceDirectory());\n    console.log(parser.readCORHeader());\n    console.log(parser.readMetadataHeader());\n    console.log(parser.readTablesHeader());\n    console.log(parser.readTables());\n    console.log(parser.readMethodBodies());\n\n    // Throw an exception as the compiler has not been fully implemented.\n    throw new NotImplementedException(\n      'The compile() function has not been fully implemented');\n  };\n\n}\n\nmodule.exports = Compiler;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class TypeSpecRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction TypeSpecRow (reader) {\n\n  'use strict';\n\n  /**\n   * The signature as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readBlobIndex();\n\n}\n\nmodule.exports = TypeSpecRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class TypeRefRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction TypeRefRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the type information row.\n   *\n   * @type {RowReference}\n   */\n  this.resolutionScope = new RowReference(reader, [\n    TableIndexes.MODULE,\n    TableIndexes.MODULE_REF,\n    TableIndexes.ASSEMBLY_REF,\n    TableIndexes.TYPE_REF\n  ]);\n\n  /**\n   * The type name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.typeName = reader.readStringIndex();\n\n  /**\n   * The type namespace as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.typeNamespace = reader.readStringIndex();\n\n}\n\nmodule.exports = TypeRefRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class TypeDefRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction TypeDefRow (reader) {\n\n  'use strict';\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The type name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.typeName = reader.readStringIndex();\n\n  /**\n   * The type namespace as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.typeNamespace = reader.readStringIndex();\n\n  /**\n   * The reference to the type information row.\n   *\n   * @type {RowReference}\n   */\n  this.extends = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.TYPE_REF,\n    TableIndexes.TYPE_SPEC\n  ]);\n\n  /**\n   * The reference to the field information row.\n   *\n   * @type {RowReference}\n   */\n  this.fieldList = new RowReference(reader, [\n    TableIndexes.FIELD\n  ]);\n\n  /**\n   * The reference to the method information row.\n   *\n   * @type {RowReference}\n   */\n  this.methodList = new RowReference(reader, [\n    TableIndexes.METHOD_DEF\n  ]);\n\n}\n\nmodule.exports = TypeDefRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class TablesHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction TablesHeader (reader) {\n\n  'use strict';\n\n  var i1, i2;\n\n  /**\n   * The first reserved value.\n   *\n   * @type {number}\n   */\n  this.reserved1 = reader.readUInt(4);\n\n  /**\n   * The major version.\n   *\n   * @type {number}\n   */\n  this.majorVersion = reader.readUInt(1);\n\n  /**\n   * The minor version.\n   *\n   * @type {number}\n   */\n  this.minorVersion = reader.readUInt(1);\n\n  /**\n   * The size of the indexes into the different streams.\n   *\n   * @type {number}\n   */\n  this.heapOffsetSizes = reader.readUInt(1);\n\n  /**\n   * The second reserved value.\n   *\n   * @type {number}\n   */\n  this.reserved2 = reader.readUInt(1);\n\n  /**\n   * The bit-mask that indicates which of the tables that are present.\n   *\n   * @type {Array<number>}\n   */\n  this.maskValidArray = [\n    (i1 = reader.readUInt(4)),\n    (i2 = reader.readUInt(4))\n  ];\n\n  /**\n   * The bit-mask that indicates which of the tables that are present.\n   *\n   * @type {number}\n   */\n  this.maskValid = (i2 << 32) | i1;\n\n  /**\n   * The bit-mask that indicates which of the tables that are sorted.\n   *\n   * @type {Array<number>}\n   */\n  this.maskSortedArray = [\n    (i1 = reader.readUInt(4)),\n    (i2 = reader.readUInt(4))\n  ];\n\n  /**\n   * The bit-mask that indicates which of the tables that are sorted.\n   *\n   * @type {number}\n   */\n  this.maskSorted = (i2 << 32) | i1;\n\n  /**\n   * The file offset to the tables relative to the beginning of the stream.\n   *\n   * @type {number}\n   */\n  this.tablesOffset = reader.getPosition();\n\n}\n\nmodule.exports = TablesHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class StandAloneSigRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction StandAloneSigRow (reader) {\n\n  'use strict';\n\n  /**\n   * The signature as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readBlobIndex();\n\n}\n\nmodule.exports = StandAloneSigRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class PropertyRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction PropertyRow (reader) {\n\n  'use strict';\n\n  /**\n   * The property flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(2);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The type as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.type = reader.readBlobIndex();\n\n}\n\nmodule.exports = PropertyRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class PropertyMapRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction PropertyMapRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n  /**\n   * The reference to the first property row.\n   *\n   * @type {RowReference}\n   */\n  this.propertyList = new RowReference(reader, [\n    TableIndexes.PROPERTY\n  ]);\n\n}\n\nmodule.exports = PropertyMapRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class SectionHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction SectionHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The section name.\n   *\n   * @type {string}\n   */\n  this.name = reader.readUTF8String(8, true);\n\n  /**\n   * The file address or the total size of the section when loaded into memory,\n   * in bytes.\n   *\n   * @type {number}\n   */\n  this.misc = reader.readUInt(4);\n\n  /**\n   * The address of the first byte of the section when loaded into memory,\n   * relative to the image base.\n   *\n   * @type {number}\n   */\n  this.virtualAddress = reader.readUInt(4);\n\n  /**\n   * The size of the initialized data on disk, in bytes.\n   *\n   * @type {number}\n   */\n  this.sizeOfRawData = reader.readUInt(4);\n\n  /**\n   * A file pointer to the first page within the COFF file.\n   *\n   * @type {number}\n   */\n  this.pointerToRawData = reader.readUInt(4);\n\n  /**\n   * A file pointer to the beginning of the relocation entries for the section.\n   *\n   * @type {number}\n   */\n  this.pointerToRelocations = reader.readUInt(4);\n\n  /**\n   * A file pointer to the beginning of the line-number entries for the section.\n   *\n   * @type {number}\n   */\n  this.pointerToLinenumbers = reader.readUInt(4);\n\n  /**\n   * The number of relocation entries for the section.\n   *\n   * @type {number}\n   */\n  this.numberOfRelocations = reader.readUInt(2);\n\n  /**\n   * The number of line-number entries for the section.\n   *\n   * @type {number}\n   */\n  this.numberOfLinenumbers = reader.readUInt(2);\n\n  /**\n   * The characteristics of the image.\n   *\n   * @type {number}\n   */\n  this.characteristics = reader.readUInt(4);\n\n}\n\nmodule.exports = SectionHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class ResourceDataEntry.\n *\n * @param {PEParser} reader\n *   The PE reader.\n *\n * @constructor\n * @struct\n */\nfunction ResourceDataEntry (reader) {\n\n  'use strict';\n\n  /**\n   * The file offset to the raw data.\n   *\n   * @type {number}\n   */\n  this.offsetToData = reader.getFileOffset(reader.readUInt(4));\n\n  /**\n   * The data size.\n   *\n   * @type {number}\n   */\n  this.size = reader.readUInt(4);\n\n  /**\n   * The code page.\n   *\n   * @type {number}\n   */\n  this.codePage = reader.readUInt(4);\n\n  /**\n   * The reserved value.\n   *\n   * @type {number}\n   */\n  this.reserved = reader.readUInt(4);\n\n}\n\nmodule.exports = ResourceDataEntry;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar ResourceDataEntry = require('./ResourceDataEntry');\nvar ResourceDirectory = require('./../Directory/ResourceDirectory');\n\n/**\n * Class ResourceDirectoryEntry.\n *\n * @param {PEParser} reader\n *   The PE reader.\n *\n * @constructor\n * @struct\n */\nfunction ResourceDirectoryEntry (reader) {\n\n  'use strict';\n\n  /**\n   * The name.\n   *\n   * @type {number}\n   */\n  this.name = reader.readUInt(4);\n\n  /**\n   * The file offset to the raw data.\n   *\n   * @type {number}\n   */\n  this.offsetToData = reader.readUInt(4);\n\n  /**\n   * The data entry.\n   *\n   * @type {ResourceDataEntry}\n   */\n  this.data = null;\n\n  /**\n   * The resource directory.\n   *\n   * @type {ResourceDirectory}\n   *   The resource directory or NULL if this entry does not point to one.\n   */\n  this.directory = null;\n\n  // Read either a resource directory or a data entry.\n  if (this.offsetToData >>> 31 === 1) {\n    this.offsetToData = reader.getResourceDirectoryFileOffset() +\n      (this.offsetToData << 1 >>> 1);\n    reader.setPosition(this.offsetToData);\n    this.directory = new ResourceDirectory(reader);\n  }\n  else {\n    this.offsetToData = reader.getResourceDirectoryFileOffset() +\n      this.offsetToData;\n    reader.setPosition(this.offsetToData);\n    this.data = new ResourceDataEntry(reader);\n  }\n\n}\n\nmodule.exports = ResourceDirectoryEntry;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar DataDirectoryHeader = require('./DataDirectoryHeader');\nvar ImageAttributes = require('./../Constant/ImageAttributes');\n\n/**\n * Class OptionalHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction OptionalHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The state of the image file.\n   *\n   * @type {number}\n   */\n  this.magic = reader.readUInt(2);\n\n  /**\n   * The major version number of the linker.\n   *\n   * @type {number}\n   */\n  this.majorLinkerVersion = reader.readUInt(1);\n\n  /**\n   * The minor version number of the linker.\n   *\n   * @type {number}\n   */\n  this.minorLinkerVersion = reader.readUInt(1);\n\n  /**\n   * The size of the code section, in bytes, or the sum of all such sections if\n   * there are multiple code sections.\n   *\n   * @type {number}\n   */\n  this.sizeOfCode = reader.readUInt(4);\n\n  /**\n   * The size of the initialized data section, in bytes, or the sum of all such\n   * sections if there are multiple initialized data sections.\n   *\n   * @type {number}\n   */\n  this.sizeOfInitializedData = reader.readUInt(4);\n\n  /**\n   * The size of the uninitialized data section, in bytes, or the sum of all\n   * such sections if there are multiple uninitialized data sections.\n   *\n   * @type {number}\n   */\n  this.sizeOfUninitializedData = reader.readUInt(4);\n\n  /**\n   * A pointer to the entry point function, relative to the image base address.\n   *\n   * @type {number}\n   */\n  this.addressOfEntryPoint = reader.readUInt(4);\n\n  /**\n   * A pointer to the beginning of the code section, relative to the image base.\n   *\n   * @type {number}\n   */\n  this.baseOfCode = reader.readUInt(4);\n\n  /**\n   * A pointer to the beginning of the data section, relative to the image base.\n   *\n   * @type {number}\n   */\n  this.baseOfData = reader.readUInt(\n    (this.magic === ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) ? 0 : 4);\n\n  /**\n   * The preferred address of the first byte of the image when it is loaded in\n   * memory.\n   *\n   * @type {number}\n   */\n  this.imageBase = reader.readUInt(\n    (this.magic === ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) ? 8 : 4);\n\n  /**\n   * The alignment of sections loaded in memory, in bytes.\n   *\n   * @type {number}\n   */\n  this.sectionAlignment = reader.readUInt(4);\n\n  /**\n   * The alignment of the raw data of sections in the image file, in bytes.\n   *\n   * @type {number}\n   */\n  this.fileAlignment = reader.readUInt(4);\n\n  /**\n   * The major version number of the required operating system.\n   *\n   * @type {number}\n   */\n  this.majorOperatingSystemVersion = reader.readUInt(2);\n\n  /**\n   * The minor version number of the required operating system.\n   *\n   * @type {number}\n   */\n  this.minorOperatingSystemVersion = reader.readUInt(2);\n\n  /**\n   * The major version number of the image.\n   *\n   * @type {number}\n   */\n  this.majorImageVersion = reader.readUInt(2);\n\n  /**\n   * The minor version number of the image.\n   *\n   * @type {number}\n   */\n  this.minorImageVersion = reader.readUInt(2);\n\n  /**\n   * The major version number of the subsystem.\n   *\n   * @type {number}\n   */\n  this.majorSubsystemVersion = reader.readUInt(2);\n\n  /**\n   * The minor version number of the subsystem.\n   *\n   * @type {number}\n   */\n  this.minorSubsystemVersion = reader.readUInt(2);\n\n  /**\n   * This member is reserved and must be 0.\n   *\n   * @type {number}\n   */\n  this.win32VersionValue = reader.readUInt(4);\n\n  /**\n   * The size of the image, in bytes, including all headers.\n   *\n   * @type {number}\n   */\n  this.sizeOfImage = reader.readUInt(4);\n\n  /**\n   * The combined size of the following items, rounded to a multiple of the\n   * value specified in the fileAlignment member.\n   *\n   * @type {number}\n   */\n  this.sizeOfHeaders = reader.readUInt(4);\n\n  /**\n   * The image file checksum.\n   *\n   * @type {number}\n   */\n  this.checkSum = reader.readUInt(4);\n\n  /**\n   * The subsystem required to run this image.\n   *\n   * @type {number}\n   */\n  this.subsystem = reader.readUInt(2);\n\n  /**\n   * The DLL characteristics of the image.\n   *\n   * @type {number}\n   */\n  this.dllCharacteristics = reader.readUInt(2);\n\n  /**\n   * The number of bytes to reserve for the stack.\n   *\n   * @type {number}\n   */\n  this.sizeOfStackReserve = reader.readUInt(\n    (this.magic === ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) ? 8 : 4);\n\n  /**\n   * The number of bytes to commit for the stack.\n   *\n   * @type {number}\n   */\n  this.sizeOfStackCommit = reader.readUInt(\n    (this.magic === ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) ? 8 : 4);\n\n  /**\n   * The number of bytes to reserve for the local heap.\n   *\n   * @type {number}\n   */\n  this.sizeOfHeapReserve = reader.readUInt(\n    (this.magic === ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) ? 8 : 4);\n\n  /**\n   * The number of bytes to commit for the local heap.\n   *\n   * @type {number}\n   */\n  this.sizeOfHeapCommit = reader.readUInt(\n    (this.magic === ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) ? 8 : 4);\n\n  /**\n   * This member is obsolete.\n   *\n   * @type {number}\n   */\n  this.loaderFlags = reader.readUInt(4);\n\n  /**\n   * The number of directory entries in the remainder of the optional header.\n   *\n   * @type {number}\n   */\n  this.numberOfRvaAndSizes = reader.readUInt(4);\n\n  /**\n   * The array of data directory headers.\n   *\n   * @type {Array<DataDirectoryHeader>}\n   */\n  this.dataDirectory = new Array(this.numberOfRvaAndSizes);\n\n  // Read the data directory headers.\n  for (var i = 0; i < this.dataDirectory.length; i++) {\n    this.dataDirectory[i] = new DataDirectoryHeader(reader);\n  }\n\n}\n\nmodule.exports = OptionalHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class DOSHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction DOSHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The magic number.\n   *\n   * @type {number}\n   */\n  this.magic = reader.readUInt(2);\n\n  /**\n   * The number of bytes on the last page in the file.\n   *\n   * @type {number}\n   */\n  this.cblp = reader.readUInt(2);\n\n  /**\n   * The number of pages in the file.\n   *\n   * @type {number}\n   */\n  this.cp = reader.readUInt(2);\n\n  /**\n   * The number of relocations.\n   *\n   * @type {number}\n   */\n  this.crlc = reader.readUInt(2);\n\n  /**\n   * The size of the header in paragraphs.\n   *\n   * @type {number}\n   */\n  this.cparhdr = reader.readUInt(2);\n\n  /**\n   * The minimum number of extra paragraphs which are needed.\n   *\n   * @type {number}\n   */\n  this.minAlloc = reader.readUInt(2);\n\n  /**\n   * The maximum number of extra paragraphs which are needed.\n   *\n   * @type {number}\n   */\n  this.maxAlloc = reader.readUInt(2);\n\n  /**\n   * The initial (relative) SS value.\n   *\n   * @type {number}\n   */\n  this.ss = reader.readUInt(2);\n\n  /**\n   * The initial SP value.\n   *\n   * @type {number}\n   */\n  this.sp = reader.readUInt(2);\n\n  /**\n   * The checksum.\n   *\n   * @type {number}\n   */\n  this.csum = reader.readUInt(2);\n\n  /**\n   * The initial IP value.\n   *\n   * @type {number}\n   */\n  this.ip = reader.readUInt(2);\n\n  /**\n   * The initial (relative) CS value.\n   *\n   * @type {number}\n   */\n  this.cs = reader.readUInt(2);\n\n  /**\n   * The file address of the relocation table.\n   *\n   * @type {number}\n   */\n  this.lfarlc = reader.readUInt(2);\n\n  /**\n   * The overlay number.\n   *\n   * @type {number}\n   */\n  this.ovno = reader.readUInt(2);\n\n  /**\n   * The first reserved words.\n   *\n   * @type {Array<number>}\n   */\n  this.res1 = reader.readUIntArray(2, 4);\n\n  /**\n   * The OEM identifier.\n   *\n   * @type {number}\n   */\n  this.oemid = reader.readUInt(2);\n\n  /**\n   * The OEM information.\n   *\n   * @type {number}\n   */\n  this.oeminfo = reader.readUInt(2);\n\n  /**\n   * The second reserved words.\n   *\n   * @type {Array<number>}\n   */\n  this.res2 = reader.readUIntArray(2, 10);\n\n  /**\n   * The file address of the new EXE header.\n   *\n   * @type {number}\n   */\n  this.lfanew = reader.readUInt(4);\n\n}\n\nmodule.exports = DOSHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class COFFHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction COFFHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The signature.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readUInt(4);\n\n  /**\n   * The architecture type of the computer.\n   *\n   * @type {number}\n   */\n  this.machine = reader.readUInt(2);\n\n  /**\n   * The number of sections.\n   *\n   * @type {number}\n   */\n  this.numberOfSections = reader.readUInt(2);\n\n  /**\n   * The low 32 bits of the time stamp of the image.\n   *\n   * @type {number}\n   */\n  this.timeDateStamp = reader.readUInt(4);\n\n  /**\n   * The offset of the symbol table, in bytes, or zero if no COFF symbol table\n   * exists.\n   *\n   * @type {number}\n   */\n  this.pointerToSymbolTable = reader.readUInt(4);\n\n  /**\n   * The number of symbols in the symbol table.\n   *\n   * @type {number}\n   */\n  this.numberOfSymbols = reader.readUInt(4);\n\n  /**\n   * The size of the optional header, in bytes. This value should be 0 for\n   * object files.\n   *\n   * @type {number}\n   */\n  this.sizeOfOptionalHeader = reader.readUInt(2);\n\n  /**\n   * The characteristics of the image. This member can be one or more of the\n   * following values.\n   *\n   * @type {number}\n   */\n  this.characteristics = reader.readUInt(2);\n\n}\n\nmodule.exports = COFFHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar ParserException = require('./Exception/ParserException');\n\n/**\n * Class BinaryParser.\n *\n * @param {string} path\n *   The file path.\n * @param {ArrayBuffer} [data]\n *   The file contents.\n *\n * @constructor\n */\nfunction BinaryParser (path, data) {\n\n  'use strict';\n\n  /**\n   * The file contents.\n   *\n   * @type {ArrayBuffer}\n   *\n   * @protected\n   */\n  this._data = (typeof data !== 'undefined') ? new Uint8Array(data) : null;\n\n  /**\n   * The file path.\n   *\n   * @type {string}\n   *\n   * @protected\n   */\n  this._path = path;\n\n  /**\n   * The file position.\n   *\n   * @type {number}\n   *\n   * @protected\n   */\n  this._position = 0;\n\n  /**\n   * Retrieves the file path.\n   *\n   * @return {string}\n   *   Returns a path.\n   */\n  this.getPath = function () {\n    return this._path;\n  };\n\n  /**\n   * Retrieves the buffer position.\n   *\n   * @return {number}\n   *   Returns the buffer position.\n   */\n  this.getPosition = function () {\n    return this._position;\n  };\n\n  /**\n   * Retrieves the buffer size.\n   *\n   * @return {number}\n   *   Returns the buffer size.\n   */\n  this.getSize = function () {\n    return this._data.byteLength;\n  };\n\n  /**\n   * Loads the file contents.\n   *\n   * @param {Function} success\n   *   The success callback.\n   * @param {Function} error\n   *   The error callback.\n   *\n   * @return {BinaryParser}\n   *   Returns this instance.\n   */\n  this.loadFile = function (success, error) {\n    var request = new XMLHttpRequest();\n    request.open('GET', this.getPath(), true);\n    request.responseType = 'arraybuffer';\n    request.onreadystatechange = (function (parser) {\n      return function () {\n        if (request.readyState === XMLHttpRequest.DONE) {\n          if (request.status === 200) {\n            // Store the data as an UInt8 array and reset the position.\n            parser._data = new Uint8Array(request.response);\n            parser._position = 0;\n\n            // Invoke the success callback in order for the invoker to proceed.\n            success(parser);\n          }\n          else {\n            error(parser, request.status);\n          }\n        }\n      };\n    })(this);\n    request.send(null);\n    return this;\n  };\n\n  /**\n   * Reads the next bytes from the buffer.\n   *\n   * @param {number} count\n   *   The number of bytes to read.\n   *\n   * @return {Array<number>}\n   *   Returns an array of bytes.\n   */\n  this.readBytes = function (count) {\n    var bytes = [];\n\n    for (var i = 0; i < count; i++) {\n      if (this._position >= this.getSize()) {\n        break;\n      }\n\n      bytes.push(this._data[this._position++]);\n    }\n\n    return bytes;\n  };\n\n  /**\n   * Reads an ASCII string from the buffer.\n   *\n   * @param {number} length\n   *   The length of the string. Specify 0 to have the function look for a NULL\n   *   terminator.\n   * @param {boolean} terminate\n   *   Whether to look for a NULL terminator after the string has been read in\n   *   which case the string will be terminated.\n   * @param {number} boundary\n   *   The string boundary in bytes.\n   *\n   * @return {string}\n   *   Returns an ASCII string.\n   */\n  this.readString = function (length, terminate, boundary) {\n    var i, s = '';\n\n    while ((i = this.readUInt(1)) !== null) {\n      s += String.fromCharCode(i);\n\n      if (length > 0) {\n        if (s.length === length) {\n          break;\n        }\n      }\n      else if (((!boundary) || (s.length % boundary === 0)) &&\n        (s.endsWith(String.fromCharCode(0)))) {\n        break;\n      }\n    }\n\n    if ((terminate) && ((i = s.indexOf(String.fromCharCode(0))) > -1)) {\n      s = s.substring(0, i);\n    }\n\n    return s;\n  };\n\n  /**\n   * Reads the next unsigned integer from the buffer.\n   *\n   * @param {number} size\n   *   The integer size in bytes.\n   *\n   * @return {number|null}\n   *   Returns the integer or NULL if the end is reached.\n   */\n  this.readUInt = function (size) {\n    var bytes = this.readBytes(size);\n    var integer = 0;\n\n    if (bytes.length != size) {\n      return null;\n    }\n\n    for (var i = size - 1; i > -1; i--) {\n      integer |= (bytes[i] << (8 * i));\n    }\n\n    return integer;\n  };\n\n  /**\n   * Reads the next unsigned integers.\n   *\n   * @param {number} size\n   *   The integer size in bytes.\n   * @param {number} count\n   *   The number of integers to read.\n   *\n   * @return {Array<number>}\n   *   Returns an array of integers.\n   */\n  this.readUIntArray = function (size, count) {\n    var integers = [];\n\n    for (var i = 0; i < count; i++) {\n      var integer = this.readUInt(size);\n\n      if (integer === null) {\n        break;\n      }\n\n      integers.push(integer);\n    }\n\n    return integers;\n  };\n\n  /**\n   * Reads a UTF-8 string from the buffer.\n   *\n   * @param {number} length\n   *   The length of the string. Specify 0 to have the function look for a\n   *   string terminator.\n   * @param {boolean} terminate\n   *   Whether to look for a string terminator after the string has been read in\n   *   which case the string will always be terminated.\n   *\n   * @return {string}\n   *   Returns a UTF-8 string.\n   */\n  this.readUTF8String = function (length, terminate) {\n    var i, s = '';\n\n    while ((i = this.readUInt(1)) !== null) {\n      s += String.fromCharCode(i);\n\n      if (length > 0) {\n        if (s.length === length) {\n          break;\n        }\n      }\n      else if (s.endsWith(String.fromCharCode(0, 0))) {\n        break;\n      }\n    }\n\n    if ((terminate) && ((i = s.indexOf(String.fromCharCode(0, 0))) > -1)) {\n      s = s.substring(0, i);\n    }\n\n    return decodeURI(encodeURIComponent(s));\n  };\n\n  /**\n   * Sets the file path.\n   *\n   * @param {string} path\n   *   The file path.\n   *\n   * @return {BinaryParser}\n   *   Returns this instance.\n   *\n   * @modifies {this}\n   */\n  this.setPath = function (path) {\n    this._path = path;\n    return this;\n  };\n\n  /**\n   * Sets the buffer position.\n   *\n   * @param {number} position\n   *   The new position.\n   *\n   * @return {BinaryParser}\n   *   Returns this instance.\n   *\n   * @modifies {this}\n   */\n  this.setPosition = function (position) {\n    this._position = position;\n    return this;\n  };\n\n}\n\nmodule.exports = BinaryParser;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar BinaryParser = require('./BinaryParser');\nvar COFFHeader = require('./Header/COFFHeader');\nvar DOSHeader = require('./Header/DOSHeader');\nvar Extend = require('extend');\nvar ImageAttributes = require('./Constant/ImageAttributes');\nvar ParserException = require('./Exception/ParserException');\nvar OptionalHeader = require('./Header/OptionalHeader');\nvar ResourceDirectory = require('./Directory/ResourceDirectory');\nvar SectionHeader = require('./Header/SectionHeader');\n\n/**\n * Class PEParser.\n *\n * @param {string} path\n *   The file path.\n * @param {ArrayBuffer} [data]\n *   The file contents.\n *\n * @constructor\n * @extends {BinaryParser}\n */\nfunction PEParser (path, data) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new BinaryParser(path, data));\n\n  /**\n   * The COFF header.\n   *\n   * @type {COFFHeader}\n   *\n   * @protected\n   */\n  this._coffHeader = null;\n\n  /**\n   * The DOS header.\n   *\n   * @type {DOSHeader}\n   *\n   * @protected\n   */\n  this._dosHeader = null;\n\n  /**\n   * The optional header.\n   *\n   * @type {OptionalHeader}\n   *\n   * @protected\n   */\n  this._optionalHeader = null;\n\n  /**\n   * The resource directory.\n   *\n   * @type {ResourceDirectory}\n   *\n   * @protected\n   */\n  this._resourceDirectory = null;\n\n  /**\n   * The resource directory file offset.\n   *\n   * @type {number}\n   *\n   * @protected\n   */\n  this._resourceDirectoryFileOffset = null;\n\n  /**\n   * The section headers.\n   *\n   * @type {Array<SectionHeader>}\n   *\n   * @protected\n   */\n  this._sectionHeaders = null;\n\n  /**\n   * Calculates the file offset for a relative virtual address.\n   *\n   * @param {number} rva\n   *   The relative virtual address.\n   *\n   * @return {number}\n   *   Returns a file offset.\n   */\n  this.getFileOffset = function (rva) {\n    // Determine which section the address belongs to and convert it to a file\n    // offset.\n    var sectionHeaders = this.readSectionHeaders();\n\n    for (var i = 0; i < sectionHeaders.length; i++) {\n      if ((rva >= sectionHeaders[i].virtualAddress) &&\n        (rva <= sectionHeaders[i].virtualAddress +\n        sectionHeaders[i].sizeOfRawData)) {\n        return sectionHeaders[i].pointerToRawData +\n          (rva - sectionHeaders[i].virtualAddress);\n      }\n    }\n\n    return -1;\n  };\n\n  /**\n   * Retrieves the resource directory file offset.\n   *\n   * @return {number}\n   *   Returns the file offset or -1 if the resource directory is empty.\n   */\n  this.getResourceDirectoryFileOffset = function () {\n    if (!this._resourceDirectoryFileOffset) {\n      // Locate the resource section in order to determine the file offset.\n      var sectionHeaders = this.readSectionHeaders();\n      var sectionHeader = null;\n\n      for (var i = 0; i < sectionHeaders.length; i++) {\n        if (sectionHeaders[i].name === '.rsrc') {\n          sectionHeader = sectionHeaders[i];\n          break;\n        }\n      }\n\n      if (sectionHeader) {\n        this._resourceDirectoryFileOffset = sectionHeader.pointerToRawData;\n      }\n      else {\n        this._resourceDirectoryFileOffset = -1;\n      }\n    }\n\n    return this._resourceDirectoryFileOffset;\n  };\n\n  /**\n   * Reads the COFF header.\n   *\n   * @return {COFFHeader}\n   *   Returns the header as an object.\n   *\n   * @throws {ParserException}\n   *   Thrown if the header is invalid.\n   */\n  this.readCOFFHeader = function () {\n    if (!this._coffHeader) {\n      // Move the stream cursor to the position of the COFF header as specified\n      // by the DOS header.\n      this.setPosition(this.readDOSHeader().lfanew);\n\n      // Read the header and throw an exception if the header seems to be\n      // invalid.\n      this._coffHeader = new COFFHeader(this);\n\n      if (this._coffHeader.signature !== ImageAttributes.IMAGE_NT_SIGNATURE) {\n        throw new ParserException('Invalid COFF header');\n      }\n    }\n\n    return this._coffHeader;\n  };\n\n  /**\n   * Reads the DOS header.\n   *\n   * @return {DOSHeader}\n   *   Returns the header as an object.\n   *\n   * @throws {ParserException}\n   *   Thrown if the header is invalid.\n   */\n  this.readDOSHeader = function () {\n    if (!this._dosHeader) {\n      // Reset the position to the beginning of the stream.\n      this.setPosition(0);\n\n      // Read the header from the buffer and throw an exception if the header is\n      // invalid.\n      this._dosHeader = new DOSHeader(this);\n\n      if (this._dosHeader.magic !== ImageAttributes.IMAGE_DOS_SIGNATURE) {\n        throw new ParserException('Invalid DOS header');\n      }\n    }\n\n    return this._dosHeader;\n  };\n\n  /**\n   * Reads the optional header.\n   *\n   * @return {OptionalHeader}\n   *   Returns the header values.\n   *\n   * @throws {ParserException}\n   *   Thrown if the header is invalid.\n   */\n  this.readOptionalHeader = function () {\n    if ((!this._optionalHeader) &&\n      (this.readCOFFHeader().sizeOfOptionalHeader > 0)) {\n      // Move the stream cursor to the position of the optional header as\n      // specified by the DOS header and the size of the COFF header.\n      this.setPosition(this.readDOSHeader().lfanew + 24);\n\n      // Read the entire header including the data directories.\n      this._optionalHeader = new OptionalHeader(this);\n\n      if ((this._optionalHeader.magic !==\n        ImageAttributes.IMAGE_NT_OPTIONAL_HDR64_MAGIC) &&\n        (this._optionalHeader.magic !==\n        ImageAttributes.IMAGE_NT_OPTIONAL_HDR32_MAGIC) &&\n        (this._optionalHeader.magic !==\n        ImageAttributes.IMAGE_ROM_OPTIONAL_HDR_MAGIC)) {\n        throw new ParserException('Invalid optional header');\n      }\n    }\n\n    return this._optionalHeader;\n  };\n\n  /**\n   * Reads the resource directory.\n   *\n   * @return {ResourceDirectory}\n   *   Returns the resource directory.\n   */\n  this.readResourceDirectory = function () {\n    if (this.getResourceDirectoryFileOffset() < 1) {\n      return this._resourceDirectory;\n    }\n\n    this.setPosition(this.getResourceDirectoryFileOffset());\n    this._resourceDirectory = new ResourceDirectory(this);\n    return this._resourceDirectory;\n  };\n\n  /**\n   * Reads the section headers.\n   *\n   * @return {Array<SectionHeader>}\n   *   Returns an array of section headers.\n   */\n  this.readSectionHeaders = function () {\n    if (!this._sectionHeaders) {\n      // Move the stream cursor to the position of the section headers.\n      this.setPosition(this.readDOSHeader().lfanew + 24 +\n        this.readCOFFHeader().sizeOfOptionalHeader);\n\n      // Read each of the section headers.\n      this._sectionHeaders = new Array(this.readCOFFHeader().numberOfSections);\n\n      for (var i = 0; i < this._sectionHeaders.length; i++) {\n        this._sectionHeaders[i] = new SectionHeader(this);\n      }\n    }\n\n    return this._sectionHeaders;\n  };\n\n}\n\nmodule.exports = PEParser;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class ParamRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ParamRow (reader) {\n\n  'use strict';\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(2);\n\n  /**\n   * The sequence.\n   *\n   * @type {number}\n   */\n  this.sequence = reader.readUInt(2);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n}\n\nmodule.exports = ParamRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class ModuleRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ModuleRow (reader) {\n\n  'use strict';\n\n  /**\n   * The generation.\n   *\n   * This value should always be zero.\n   *\n   * @type {number}\n   */\n  this.generation = reader.readUInt(2);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The module id as an index into the GUID heap.\n   *\n   * @type {number}\n   */\n  this.mvid = reader.readGUIDIndex();\n\n  /**\n   * The encryption id as an index into the GUID heap.\n   *\n   * This value should always be zero.\n   *\n   * @type {number}\n   */\n  this.encId = reader.readGUIDIndex();\n\n  /**\n   * The base encryption id as an index into the GUID heap.\n   *\n   * This value should always be zero.\n   *\n   * @type {number}\n   */\n  this.encBaseId = reader.readGUIDIndex();\n\n}\n\nmodule.exports = ModuleRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class ModuleRefRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ModuleRefRow (reader) {\n\n  'use strict';\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n}\n\nmodule.exports = ModuleRefRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class MethodSemanticsRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction MethodSemanticsRow (reader) {\n\n  'use strict';\n\n  /**\n   * The semantics.\n   *\n   * @type {number}\n   */\n  this.semantics = reader.readUInt(2);\n\n  /**\n   * The reference to the method row.\n   *\n   * @type {RowReference}\n   */\n  this.method = new RowReference(reader, [\n    TableIndexes.METHOD_DEF\n  ]);\n\n  /**\n   * The reference to the associated row.\n   *\n   * @type {RowReference}\n   */\n  this.association = new RowReference(reader, [\n    TableIndexes.EVENT,\n    TableIndexes.PROPERTY\n  ]);\n\n}\n\nmodule.exports = MethodSemanticsRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class MethodImplRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction MethodImplRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the class definition row.\n   *\n   * @type {RowReference}\n   */\n  this.class = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n  /**\n   * The reference to the method body row.\n   *\n   * @type {RowReference}\n   */\n  this.methodBody = new RowReference(reader, [\n    TableIndexes.METHOD_DEF,\n    TableIndexes.MEMBER_REF\n  ]);\n\n  /**\n   * The reference to the method declaration row.\n   *\n   * @type {RowReference}\n   */\n  this.methodDeclaration = new RowReference(reader, [\n    TableIndexes.METHOD_DEF,\n    TableIndexes.MEMBER_REF\n  ]);\n\n}\n\nmodule.exports = MethodImplRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Extend = require('extend');\nvar MethodOperation = require('../MethodOperation');\n\n/**\n * Class ReturnOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @extends {MethodOperation}\n */\nfunction ReturnOperation (parser, code, name) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new MethodOperation(parser, code, name));\n\n}\n\nmodule.exports = ReturnOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Extend = require('extend');\nvar MethodOperation = require('../MethodOperation');\n\n/**\n * Class NoOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @extends {MethodOperation}\n */\nfunction NoOperation (parser, code, name) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new MethodOperation(parser, code, name));\n\n}\n\nmodule.exports = NoOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Extend = require('extend');\nvar TokenOperation = require('./TokenOperation');\n\n/**\n * Class LoadStringOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @extends {TokenOperation}\n */\nfunction LoadStringOperation (parser, code, name) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new TokenOperation(parser, code, name));\n\n}\n\nmodule.exports = LoadStringOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Extend = require('extend');\nvar MethodOperation = require('../MethodOperation');\nvar OpCodes = require('../../Constant/OpCodes');\n\n/**\n * Class LoadArgumentOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @extends {MethodOperation}\n */\nfunction LoadArgumentOperation (parser, code, name) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new MethodOperation(parser, code, name));\n\n  /**\n   * The argument index.\n   *\n   * @type {number}\n   */\n  this.index = (\n    (code >= OpCodes.LDARG_0) && (code <= OpCodes.LDARG_3) ?\n      code - OpCodes.LDARG_0 : (\n        (code === OpCodes.LDARG) ?\n          parser.readUInt(2) : (\n            (code === OpCodes.LDARG_S) ?\n              parser.readUInt(1) :\n              -1\n          )\n      )\n  );\n\n}\n\nmodule.exports = LoadArgumentOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Extend = require('extend');\nvar TokenOperation = require('./TokenOperation');\n\n/**\n * Class CallOperation.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n * @param {number} code\n *   The operation code.\n * @param {string} name\n *   The operation name.\n *\n * @constructor\n * @extends {TokenOperation}\n */\nfunction CallOperation (parser, code, name) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new TokenOperation(parser, code, name));\n\n}\n\nmodule.exports = CallOperation;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar CallOperation = require('./Operation/CallOperation');\nvar LoadArgumentOperation = require('./Operation/LoadArgumentOperation');\nvar LoadStringOperation = require('./Operation/LoadStringOperation');\nvar MethodOperation = require('./MethodOperation');\nvar NoOperation = require('./Operation/NoOperation');\nvar OpCodes = require('../Constant/OpCodes');\nvar ParserException = require('../Exception/ParserException');\nvar ReturnOperation = require('./Operation/ReturnOperation');\n\n/**\n * Class MethodOperationFactory.\n *\n * @constructor\n * @struct\n */\nfunction MethodOperationFactory () {\n\n  'use strict';\n\n  /**\n   * The registered operation classes.\n   *\n   * @type {Array<MethodOperation>}\n   */\n  this._classes = [];\n\n  /**\n   * Parses an operation.\n   *\n   * @param {CILParser} parser\n   *   The CIL parser.\n   * @param {number} code\n   *   The operation code.\n   * @param {string} name\n   *   The operation name.\n   */\n  this.parse = function (parser, code, name) {\n    if (!this._classes[code]) {\n      throw new ParserException('Unsupported IL operation \\'' + name +\n        '\\' (0x' + code.toString(16).toUpperCase() + ')');\n    }\n\n    return new this._classes[code](parser, code, name);\n  };\n\n  /**\n   * Registers a constructor for a specific operation.\n   *\n   * @param {number} code\n   *   The operation code.\n   * @param {MethodOperation} constructor\n   *   The operation constructor.\n   */\n  this.register = function (code, constructor) {\n    this._classes[code] = constructor;\n  };\n\n  // Register the supported operations.\n  this.register(OpCodes.CALL, CallOperation);\n  this.register(OpCodes.LDARG, LoadArgumentOperation);\n  this.register(OpCodes.LDARG_0, LoadArgumentOperation);\n  this.register(OpCodes.LDARG_1, LoadArgumentOperation);\n  this.register(OpCodes.LDARG_2, LoadArgumentOperation);\n  this.register(OpCodes.LDARG_3, LoadArgumentOperation);\n  this.register(OpCodes.LDARG_S, LoadArgumentOperation);\n  this.register(OpCodes.LDSTR, LoadStringOperation);\n  this.register(OpCodes.NOP, NoOperation);\n  this.register(OpCodes.RET, ReturnOperation);\n}\n\nmodule.exports = new MethodOperationFactory();\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class MethodFlags.\n *\n * @constructor\n * @struct\n */\nfunction MethodFlags () {\n\n  'use strict';\n\n  /**\n   * The fat format flag.\n   *\n   * @const {number}\n   */\n  this.FAT_FORMAT = 0x3;\n\n  /**\n   * The initialize locals flag.\n   *\n   * @const {number}\n   */\n  this.INITIALIZE_LOCALS = 0x10;\n\n  /**\n   * The more sections flag.\n   *\n   * @const {number}\n   */\n  this.MORE_SECTIONS = 0x8;\n\n  /**\n   * The tiny format flag.\n   *\n   * @const {number}\n   */\n  this.TINY_FORMAT = 0x2;\n\n}\n\nmodule.exports = new MethodFlags();\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar MethodFlags = require('../Constant/MethodFlags');\n\n/**\n * Class MethodHeader.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n *\n * @constructor\n * @struct\n */\nfunction MethodHeader (parser) {\n\n  'use strict';\n\n  // Retrieve the first one or two bytes specifying the flags and header size.\n  var flagsAndSize = parser.readUInt(1);\n  var thin = true;\n\n  if ((flagsAndSize & MethodFlags.TINY_FORMAT) === 0) {\n    parser.setPosition(parser.getPosition() - 1);\n    flagsAndSize = parser.readUInt(2);\n    thin = false;\n  }\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = thin ? flagsAndSize & 0x03 : flagsAndSize & 0xFFF;\n\n  /**\n   * The header size.\n   *\n   * @type {number}\n   */\n  this.headerSize = thin ? 1 : flagsAndSize >> 12;\n\n  /**\n   * The maximum number of items on the operand stack.\n   *\n   * @return {number}\n   */\n  this.maxStack = thin ? 8 : parser.readUInt(2);\n\n  /**\n   * The size in bytes of the operations.\n   *\n   * @return {number}\n   */\n  this.operationsSize = thin ? flagsAndSize >> 2 : parser.readUInt(4);\n\n  /**\n   * The metadata token for a signature describing the layout of the local\n   * variables for the method\n   *\n   * @return {number}\n   */\n  this.localVarSigTok = thin ? 0 : parser.readUInt(4);\n\n  /**\n   * The file offset to the operations.\n   *\n   * @type {number}\n   */\n  this.operationsOffset = parser.getPosition();\n\n}\n\nmodule.exports = MethodHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar MethodHeader = require('./MethodHeader');\nvar MethodOperation = require('./MethodOperation');\nvar MethodOperationFactory = require('./MethodOperationFactory');\nvar OpCodes = require('../Constant/OpCodes');\nvar ParserException = require('../Exception/ParserException');\n\n/**\n * Class MethodBody.\n *\n * @param {CILParser} parser\n *   The CIL parser.\n *\n * @constructor\n * @struct\n */\nfunction MethodBody (parser) {\n\n  'use strict';\n\n  /**\n   * The header.\n   *\n   * @type {MethodHeader}\n   */\n  this.header = new MethodHeader(parser);\n\n  /**\n   * The operations.\n   *\n   * @type {Array<MethodOperation>}\n   */\n  this.operations = [];\n\n  // Read the operations.\n  while (parser.getPosition() < this.header.operationsOffset +\n    this.header.operationsSize) {\n    var name = null;\n    var code = parser.readUInt(1);\n\n    if (code === 0xFE) {\n      parser.setPosition(parser.getPosition() - 1);\n      code = parser.readUInt(2);\n    }\n\n    for (var property in OpCodes) {\n      if (OpCodes.hasOwnProperty(property)) {\n        if (OpCodes[property] === code) {\n          name = property.toLowerCase().replace('_', '.');\n        }\n      }\n    }\n\n    if (!name) {\n      throw new ParserException('Invalid IL operation 0x' +\n        code.toString(16).toUpperCase());\n    }\n\n    this.operations.push(MethodOperationFactory.parse(parser, code, name));\n  }\n}\n\nmodule.exports = MethodBody;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class MethodDefRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction MethodDefRow (reader) {\n\n  'use strict';\n\n  /**\n   * The relative virtual address.\n   *\n   * @type {number}\n   */\n  this.rva = reader.readUInt(4);\n\n  /**\n   * The implementation flags.\n   *\n   * @type {number}\n   */\n  this.implFlags = reader.readUInt(2);\n\n  /**\n   * The method flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(2);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The signature as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readBlobIndex();\n\n  /**\n   * The reference to the param definition row.\n   *\n   * @type {RowReference}\n   */\n  this.paramList = new RowReference(reader, [\n    TableIndexes.PARAM\n  ]);\n\n}\n\nmodule.exports = MethodDefRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class NestedClassRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction NestedClassRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the nested class information row.\n   *\n   * @type {RowReference}\n   */\n  this.nestedClass = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n  /**\n   * The reference to the enclosing class information row.\n   *\n   * @type {RowReference}\n   */\n  this.enclosingClass = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n}\n\nmodule.exports = NestedClassRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class MemberRefRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction MemberRefRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the class definition row.\n   *\n   * @type {RowReference}\n   */\n  this.class = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.TYPE_REF,\n    TableIndexes.MODULE_REF,\n    TableIndexes.METHOD_DEF,\n    TableIndexes.TYPE_SPEC\n  ]);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The signature as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readBlobIndex();\n\n}\n\nmodule.exports = MemberRefRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class StreamHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction StreamHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The file offset to the stream relative to the metadata header.\n   *\n   * @type {number}\n   */\n  this.offset = reader.readUInt(4);\n\n  /**\n   * The size of the stream, in bytes.\n   *\n   * @type {number}\n   */\n  this.size = reader.readUInt(4);\n\n  /**\n   * The name of the stream.\n   *\n   * @type {string}\n   */\n  this.name = reader.readString(0, true, 4);\n\n}\n\nmodule.exports = StreamHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar StreamHeader = require('./StreamHeader');\n\n/**\n * Class MetadataHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction MetadataHeader (reader) {\n\n  'use strict';\n\n  var i;\n\n  /**\n   * The file offset to the header relative to the beginning of the stream.\n   *\n   * @type {number}\n   */\n  this.offset = reader.getPosition();\n\n  /**\n   * The signature.\n   *\n   * This value should always equal 0x424A5342.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readUInt(4);\n\n  /**\n   * The major version.\n   *\n   * @type {number}\n   */\n  this.majorVersion = reader.readUInt(2);\n\n  /**\n   * The minor version.\n   *\n   * @type {number}\n   */\n  this.minorVersion = reader.readUInt(2);\n\n  /**\n   * A reserved value.\n   *\n   * This value should always equal 0x00.\n   *\n   * @type {number}\n   */\n  this.reserved = reader.readUInt(4);\n\n  /**\n   * The length of the version string.\n   *\n   * @type {number}\n   */\n  this.versionLength = (i = (i = reader.readUInt(4)) + (i % 4));\n\n  /**\n   * The version string.\n   *\n   * @type {string}\n   */\n  this.version = reader.readUTF8String(i, true);\n\n  /**\n   * The flags.\n   *\n   * This value should always equal 0x00.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(2);\n\n  /**\n   * The number of streams.\n   *\n   * @type {number}\n   */\n  this.streams = reader.readUInt(2);\n\n  /**\n   * The stream headers.\n   *\n   * @type {Array<StreamHeader>}\n   */\n  this.streamHeaders = new Array(this.streams);\n\n  // Read the stream headers.\n  for (i = 0; i < this.streamHeaders.length; i++) {\n    this.streamHeaders[i] = new StreamHeader(reader);\n  }\n\n}\n\nmodule.exports = MetadataHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class ManifestResourceRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ManifestResourceRow (reader) {\n\n  'use strict';\n\n  /**\n   * The offset.\n   *\n   * @type {number}\n   */\n  this.offset = reader.readUInt(4);\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The reference to the type information row.\n   *\n   * @type {RowReference}\n   */\n  this.implementation = new RowReference(reader, [\n    TableIndexes.FILE,\n    TableIndexes.ASSEMBLY_REF,\n    TableIndexes.EXPORTED_TYPE\n  ]);\n\n}\n\nmodule.exports = ManifestResourceRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class InterfaceImplRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction InterfaceImplRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the class definition row.\n   *\n   * @type {RowReference}\n   */\n  this.class = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n  /**\n   * The reference to the interface definition row.\n   *\n   * @type {RowReference}\n   */\n  this.interface = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.TYPE_REF,\n    TableIndexes.TYPE_SPEC\n  ]);\n\n}\n\nmodule.exports = InterfaceImplRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class ImplMapRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ImplMapRow (reader) {\n\n  'use strict';\n\n  /**\n   * The mapping flags.\n   *\n   * @type {number}\n   */\n  this.mappingFlags = reader.readUInt(2);\n\n  /**\n   * The forwarded member as a reference to a Field or MethodDef row.\n   *\n   * @type {RowReference}\n   */\n  this.memberForwarded = new RowReference(reader, [\n    TableIndexes.FIELD,\n    TableIndexes.METHOD_DEF\n  ]);\n\n  /**\n   * The import name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.importName = reader.readStringIndex();\n\n  /**\n   * The import scope as a reference to a ModuleRef row.\n   *\n   * @type {RowReference}\n   */\n  this.importScope = new RowReference(reader, [\n    TableIndexes.MODULE\n  ]);\n\n}\n\nmodule.exports = ImplMapRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class GenericParamConstraintRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction GenericParamConstraintRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the owner row.\n   *\n   * @type {RowReference}\n   */\n  this.owner = new RowReference(reader, [\n    TableIndexes.GENERIC_PARAM\n  ]);\n\n  /**\n   * The reference to the class row.\n   *\n   * @type {RowReference}\n   */\n  this.constraint = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.TYPE_REF,\n    TableIndexes.TYPE_SPEC\n  ]);\n\n}\n\nmodule.exports = GenericParamConstraintRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class GenericParamRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction GenericParamRow (reader) {\n\n  'use strict';\n\n  /**\n   * The index of the generic parameter.\n   *\n   * @type {number}\n   */\n  this.number = reader.readUInt(2);\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(2);\n\n  /**\n   * The reference to the owner of the generic parameter.\n   *\n   * @type {RowReference}\n   */\n  this.owner = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.METHOD_DEF\n  ]);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n}\n\nmodule.exports = GenericParamRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class FileRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction FileRow (reader) {\n\n  'use strict';\n\n  /**\n   * The OS platform id.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The hash value as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.hashValue = reader.readBlobIndex();\n\n}\n\nmodule.exports = FileRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class FieldMarshalRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction FieldMarshalRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.FIELD,\n    TableIndexes.PARAM\n  ]);\n\n  /**\n   * The native type as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.nativeType = reader.readBlobIndex();\n\n}\n\nmodule.exports = FieldMarshalRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class FieldLayoutRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction FieldLayoutRow (reader) {\n\n  'use strict';\n\n  /**\n   * The offset.\n   *\n   * @type {number}\n   */\n  this.offset = reader.readUInt(4);\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.field = new RowReference(reader, [\n    TableIndexes.FIELD\n  ]);\n\n}\n\nmodule.exports = FieldLayoutRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class FieldRVARow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction FieldRVARow (reader) {\n\n  'use strict';\n\n  /**\n   * The relative virtual address of the initial value.\n   *\n   * @type {number}\n   */\n  this.rva = reader.readUInt(4);\n\n  /**\n   * The field as a reference to a Field row.\n   *\n   * @type {RowReference}\n   */\n  this.field = new RowReference(reader, [\n    TableIndexes.FIELD\n  ]);\n\n}\n\nmodule.exports = FieldRVARow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class FieldRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction FieldRow (reader) {\n\n  'use strict';\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.type = reader.readUInt(2);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The signature as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.signature = reader.readBlobIndex();\n\n}\n\nmodule.exports = FieldRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class ExportedTypeRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ExportedTypeRow (reader) {\n\n  'use strict';\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The type definition id.\n   *\n   * @type {number}\n   */\n  this.typeDefId = reader.readUInt(4);\n\n  /**\n   * The type name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.typeName = reader.readStringIndex();\n\n  /**\n   * The type namespace as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.typeNamespace = reader.readStringIndex();\n\n  /**\n   * The reference to the type information row.\n   *\n   * @type {RowReference}\n   */\n  this.implementation = new RowReference(reader, [\n    TableIndexes.FILE,\n    TableIndexes.EXPORTED_TYPE\n  ]);\n\n}\n\nmodule.exports = ExportedTypeRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class EventRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction EventRow (reader) {\n\n  'use strict';\n\n  /**\n   * The event flags.\n   *\n   * @type {number}\n   */\n  this.eventFlags = reader.readUInt(2);\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The event type as a reference to a TypeDef, TypeRef or TypeSpec row.\n   *\n   * @type {RowReference}\n   */\n  this.eventType = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.TYPE_REF,\n    TableIndexes.TYPE_SPEC\n  ]);\n\n}\n\nmodule.exports = EventRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class EventMapRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction EventMapRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n  /**\n   * The reference to the first event row.\n   *\n   * @type {RowReference}\n   */\n  this.eventList = new RowReference(reader, [\n    TableIndexes.EVENT\n  ]);\n\n}\n\nmodule.exports = EventMapRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class DeclSecurityRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction DeclSecurityRow (reader) {\n\n  'use strict';\n\n  /**\n   * The action.\n   *\n   * @type {number}\n   */\n  this.action = reader.readUInt(2);\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.TYPE_DEF,\n    TableIndexes.METHOD_DEF,\n    TableIndexes.ASSEMBLY\n  ]);\n\n  /**\n   * The native type as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.permissionSet = reader.readBlobIndex();\n\n}\n\nmodule.exports = DeclSecurityRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class ConstantRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction CustomAttributeRow (reader) {\n\n  'use strict';\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.METHOD_DEF,\n    TableIndexes.FIELD,\n    TableIndexes.TYPE_REF,\n    TableIndexes.TYPE_DEF,\n    TableIndexes.PARAM,\n    TableIndexes.INTERFACE_IMPL,\n    TableIndexes.MEMBER_REF,\n    TableIndexes.MODULE,\n    -1,\n    TableIndexes.PROPERTY,\n    TableIndexes.EVENT,\n    TableIndexes.STAND_ALONE_SIG,\n    TableIndexes.MODULE_REF,\n    TableIndexes.TYPE_SPEC,\n    TableIndexes.ASSEMBLY,\n    TableIndexes.ASSEMBLY_REF,\n    TableIndexes.FILE,\n    TableIndexes.EXPORTED_TYPE,\n    TableIndexes.MANIFEST_RESOURCE\n  ]);\n\n  /**\n   * The reference to the type row.\n   *\n   * @type {RowReference}\n   */\n  this.type = new RowReference(reader, [\n    -1,\n    -1,\n    TableIndexes.METHOD_DEF,\n    TableIndexes.MEMBER_REF,\n    -1\n  ]);\n\n  /**\n   * The value as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.value = reader.readBlobIndex();\n\n}\n\nmodule.exports = CustomAttributeRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar DataDirectoryHeader = require('./DataDirectoryHeader');\n\n/**\n * Class CORHeader.\n *\n * @param {BinaryParser} reader\n *   The binary reader.\n *\n * @constructor\n * @struct\n */\nfunction CORHeader (reader) {\n\n  'use strict';\n\n  /**\n   * The size of the header, in bytes.\n   *\n   * @type {number}\n   */\n  this.sizeOfHeader = reader.readUInt(4);\n\n  /**\n   * The major runtime version.\n   *\n   * @type {number}\n   */\n  this.majorRuntimeVersion = reader.readUInt(2);\n\n  /**\n   * The minor runtime version.\n   *\n   * @type {number}\n   */\n  this.minorRuntimeVersion = reader.readUInt(2);\n\n  /**\n   * The metadata directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.metadata = new DataDirectoryHeader(reader);\n\n  /**\n   * The runtime flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The entry point address or token.\n   *\n   * @type {number}\n   */\n  this.entryPoint = reader.readUInt(4);\n\n  /**\n   * The resources directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.resources = new DataDirectoryHeader(reader);\n\n  /**\n   * The strong name signature directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.strongNameSignature = new DataDirectoryHeader(reader);\n\n  /**\n   * The code manager table directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.codeManagerTable = new DataDirectoryHeader(reader);\n\n  /**\n   * The VTable fix-ups directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.vTableFixups = new DataDirectoryHeader(reader);\n\n  /**\n   * The exported address table jumps directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.exportAddressTableJumps = new DataDirectoryHeader(reader);\n\n  /**\n   * The managed native header directory header.\n   *\n   * @type {DataDirectoryHeader}\n   */\n  this.managedNativeHeader = new DataDirectoryHeader(reader);\n\n}\n\nmodule.exports = CORHeader;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class ConstantRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ConstantRow (reader) {\n\n  'use strict';\n\n  /**\n   * The type.\n   *\n   * @type {number}\n   */\n  this.type = reader.readUInt(1) + reader.readUInt(1);\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.FIELD,\n    TableIndexes.PARAM,\n    TableIndexes.PROPERTY\n  ]);\n\n  /**\n   * The value as an index into the Blob heap.\n   *\n   * @type {number}\n   */\n  this.value = reader.readBlobIndex();\n\n}\n\nmodule.exports = ConstantRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class ClassLayoutRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction ClassLayoutRow (reader) {\n\n  'use strict';\n\n  /**\n   * The packing size.\n   *\n   * @type {number}\n   */\n  this.packingSize = reader.readUInt(2);\n\n  /**\n   * The class size.\n   *\n   * @type {number}\n   */\n  this.classSize = reader.readUInt(4);\n\n  /**\n   * The reference to the parent row.\n   *\n   * @type {RowReference}\n   */\n  this.parent = new RowReference(reader, [\n    TableIndexes.TYPE_DEF\n  ]);\n\n}\n\nmodule.exports = ClassLayoutRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class AssemblyRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction AssemblyRow (reader) {\n\n  'use strict';\n\n  /**\n   * The id of the hashing algorithm.\n   *\n   * @type {number}\n   */\n  this.hashAlgId = reader.readUInt(4);\n\n  /**\n   * The major version.\n   *\n   * @type {number}\n   */\n  this.majorVersion = reader.readUInt(2);\n\n  /**\n   * The minor version.\n   *\n   * @type {number}\n   */\n  this.minorVersion = reader.readUInt(2);\n\n  /**\n   * The build number.\n   *\n   * @type {number}\n   */\n  this.buildNumber = reader.readUInt(2);\n\n  /**\n   * The revision number.\n   *\n   * @type {number}\n   */\n  this.revisionNumber = reader.readUInt(2);\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The public key as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.publicKey = reader.readBlobIndex();\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The culture as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.culture = reader.readStringIndex();\n\n}\n\nmodule.exports = AssemblyRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class AssemblyRefRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction AssemblyRefRow (reader) {\n\n  'use strict';\n\n  /**\n   * The major version.\n   *\n   * @type {number}\n   */\n  this.majorVersion = reader.readUInt(2);\n\n  /**\n   * The minor version.\n   *\n   * @type {number}\n   */\n  this.minorVersion = reader.readUInt(2);\n\n  /**\n   * The build number.\n   *\n   * @type {number}\n   */\n  this.buildNumber = reader.readUInt(2);\n\n  /**\n   * The revision number.\n   *\n   * @type {number}\n   */\n  this.revisionNumber = reader.readUInt(2);\n\n  /**\n   * The flags.\n   *\n   * @type {number}\n   */\n  this.flags = reader.readUInt(4);\n\n  /**\n   * The public key or token as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.publicKeyOrToken = reader.readBlobIndex();\n\n  /**\n   * The name as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.name = reader.readStringIndex();\n\n  /**\n   * The culture as an index into the string heap.\n   *\n   * @type {number}\n   */\n  this.culture = reader.readStringIndex();\n\n  /**\n   * The hash value as an index into the blob heap.\n   *\n   * @type {number}\n   */\n  this.hashValue = reader.readBlobIndex();\n\n}\n\nmodule.exports = AssemblyRefRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class AssemblyRefProcessorRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction AssemblyRefProcessorRow (reader) {\n\n  'use strict';\n\n  /**\n   * The processor type.\n   *\n   * @type {number}\n   */\n  this.processor = reader.readUInt(4);\n\n  /**\n   * The reference to the assembly reference row.\n   *\n   * @type {RowReference}\n   */\n  this.assemblyRef = new RowReference(reader, [\n    TableIndexes.ASSEMBLY_REF\n  ]);\n\n}\n\nmodule.exports = AssemblyRefProcessorRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar RowReference = require('./../Reference/RowReference');\nvar TableIndexes = require('./../Constant/TableIndexes');\n\n/**\n * Class AssemblyRefOSRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction AssemblyRefOSRow (reader) {\n\n  'use strict';\n\n  /**\n   * The OS platform id.\n   *\n   * @type {number}\n   */\n  this.osPlatformID = reader.readUInt(4);\n\n  /**\n   * The OS major version.\n   *\n   * @type {number}\n   */\n  this.osMajorVersion = reader.readUInt(4);\n\n  /**\n   * The OS minor version.\n   *\n   * @type {number}\n   */\n  this.osMinorVersion = reader.readUInt(4);\n\n  /**\n   * The reference to the assembly reference row.\n   *\n   * @type {RowReference}\n   */\n  this.assemblyRef = new RowReference(reader, [\n    TableIndexes.ASSEMBLY_REF\n  ]);\n\n}\n\nmodule.exports = AssemblyRefOSRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class AssemblyProcessorRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction AssemblyProcessorRow (reader) {\n\n  'use strict';\n\n  /**\n   * The processor type.\n   *\n   * @type {number}\n   */\n  this.processor = reader.readUInt(4);\n\n}\n\nmodule.exports = AssemblyProcessorRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Class AssemblyOSRow.\n *\n * @param {CILParser} reader\n *   The CIL reader.\n *\n * @constructor\n * @struct\n */\nfunction AssemblyOSRow (reader) {\n\n  'use strict';\n\n  /**\n   * The OS platform id.\n   *\n   * @type {number}\n   */\n  this.osPlatformID = reader.readUInt(4);\n\n  /**\n   * The OS major version.\n   *\n   * @type {number}\n   */\n  this.osMajorVersion = reader.readUInt(4);\n\n  /**\n   * The OS minor version.\n   *\n   * @type {number}\n   */\n  this.osMinorVersion = reader.readUInt(4);\n\n}\n\nmodule.exports = AssemblyOSRow;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar AssemblyOSRow = require('./Row/AssemblyOSRow');\nvar AssemblyProcessorRow = require('./Row/AssemblyProcessorRow');\nvar AssemblyRefOSRow = require('./Row/AssemblyRefOSRow');\nvar AssemblyRefProcessorRow = require('./Row/AssemblyRefProcessorRow');\nvar AssemblyRefRow = require('./Row/AssemblyRefRow');\nvar AssemblyRow = require('./Row/AssemblyRow');\nvar ClassLayoutRow = require('./Row/ClassLayoutRow');\nvar ConstantRow = require('./Row/ConstantRow');\nvar CORHeader = require('./Header/CORHeader');\nvar CustomAttributeRow = require('./Row/CustomAttributeRow');\nvar DeclSecurityRow = require('./Row/DeclSecurityRow');\nvar EventMapRow = require('./Row/EventMapRow');\nvar EventRow = require('./Row/EventRow');\nvar ExportedTypeRow = require('./Row/ExportedTypeRow');\nvar Extend = require('extend');\nvar FieldRow = require('./Row/FieldRow');\nvar FieldRVARow = require('./Row/FieldRVARow');\nvar FieldLayoutRow = require('./Row/FieldLayoutRow');\nvar FieldMarshalRow = require('./Row/FieldMarshalRow');\nvar FileRow = require('./Row/FileRow');\nvar GenericParamRow = require('./Row/GenericParamRow');\nvar GenericParamConstraintRow = require('./Row/GenericParamConstraintRow');\nvar ImplMapRow = require('./Row/ImplMapRow');\nvar InterfaceImplRow = require('./Row/InterfaceImplRow');\nvar ParserException = require('./Exception/ParserException');\nvar ManifestResourceRow = require('./Row/ManifestResourceRow');\nvar MetadataHeader = require('./Header/MetadataHeader');\nvar MemberRefRow = require('./Row/MemberRefRow');\nvar NestedClassRow = require('./Row/NestedClassRow');\nvar MethodDefRow = require('./Row/MethodDefRow');\nvar MethodBody = require('./Method/MethodBody');\nvar MethodImplRow = require('./Row/MethodImplRow');\nvar MethodSemanticsRow = require('./Row/MethodSemanticsRow');\nvar ModuleRefRow = require('./Row/ModuleRefRow');\nvar ModuleRow = require('./Row/ModuleRow');\nvar ParamRow = require('./Row/ParamRow');\nvar PEParser = require('./PEParser');\nvar PropertyMapRow = require('./Row/PropertyMapRow');\nvar PropertyRow = require('./Row/PropertyRow');\nvar StandAloneSigRow = require('./Row/StandAloneSigRow');\nvar TableIndexes = require('./Constant/TableIndexes');\nvar TablesHeader = require('./Header/TablesHeader');\nvar TypeDefRow = require('./Row/TypeDefRow');\nvar TypeRefRow = require('./Row/TypeRefRow');\nvar TypeSpecRow = require('./Row/TypeSpecRow');\n\n/**\n * Class CILParser.\n *\n * @param {string} path\n *   The file path.\n * @param {ArrayBuffer} [data]\n *   The file contents.\n *\n * @constructor\n * @extends {PEParser}\n */\nfunction CILParser (path, data) {\n\n  'use strict';\n\n  // Invoke the parent constructor.\n  Extend(true, this, new PEParser(path, data));\n\n  /**\n   * The COR header.\n   *\n   * @type {CORHeader}\n   *\n   * @protected\n   */\n  this._corHeader = null;\n\n  /**\n   * The metadata header.\n   *\n   * @type {MetadataHeader}\n   *\n   * @protected\n   */\n  this._metadataHeader = null;\n\n  /**\n   * The method headers.\n   *\n   * @type {Array<MethodBody>}\n   *\n   * @protected\n   */\n  this._methodBodies = null;\n\n  /**\n   * The metadata tables.\n   *\n   * @type {Array<Object>}\n   *\n   * @protected\n   */\n  this._tables = null;\n\n  /**\n   * The tables header.\n   *\n   * @type {TablesHeader}\n   *\n   * @protected\n   */\n  this._tablesHeader = null;\n\n  /**\n   * Retrieves a stream header.\n   *\n   * @param {string} name\n   *   The stream name.\n   *\n   * @return {StreamHeader|null}\n   *   Returns the stream header or NULL if not found.\n   */\n  this.getStreamHeader = function (name) {\n    var streamHeaders = this.readMetadataHeader().streamHeaders;\n\n    for (var i = 0; i < streamHeaders.length; i++) {\n      if (streamHeaders[i].name === name) {\n        return streamHeaders[i];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Reads a blob index from the stream.\n   *\n   * @return {number}\n   *   Returns an index.\n   */\n  this.readBlobIndex = function () {\n    if ((this.readTablesHeader().heapOffsetSizes & 0x04) !== 0) {\n      return this.readUInt(4);\n    }\n    else {\n      return this.readUInt(2);\n    }\n  };\n\n  /**\n   * Reads the COR header.\n   *\n   * @return {CORHeader}\n   *   Returns the header as an object.\n   *\n   * @throws {ParserException}\n   *   Thrown if the header is missing or is invalid.\n   */\n  this.readCORHeader = function () {\n    if (!this._corHeader) {\n      // Verify that the CLR (formerly COM) data directory is available.\n      if ((this.readOptionalHeader().dataDirectory.length < 15) ||\n        (this.readOptionalHeader().dataDirectory[14].size < 1)) {\n        throw new ParserException('The CLR data directory is missing');\n      }\n\n      // Move the stream cursor to the position of the COR header.\n      this.setPosition(this.getFileOffset(\n        this.readOptionalHeader().dataDirectory[14].virtualAddress));\n\n      // Read the the header and throw an exception if it is invalid.\n      this._corHeader = new CORHeader(this);\n\n      if (this._corHeader.sizeOfHeader !== 72) {\n        throw new ParserException('Invalid COR header (size: ' +\n          this._corHeader.sizeOfHeader  + ' - expected: 72)');\n      }\n    }\n\n    return this._corHeader;\n  };\n\n  /**\n   * Reads a GUID from the heap.\n   *\n   * @param {number} index\n   *   The index into the heap.\n   *\n   * @return {string}\n   *   Returns a 128-bit unique identifier.\n   */\n  this.readGUIDFromHeap = function (index) {\n    // Locate the table stream and throw an exception if it is missing.\n    var streamHeader = this.getStreamHeader('#GUID');\n\n    if (!streamHeader) {\n      throw new ParserException('The #GUID stream is missing');\n    }\n\n    // Move the stream cursor to the position of the string.\n    this.setPosition(this.readMetadataHeader().offset + streamHeader.offset +\n      index);\n\n    // Read the GUID from the stream and format it before returning it.\n    var guid = '', s = this.readString(16);\n\n    for (var i = 0; i < s.length; i++) {\n      if ((i === 4) || (i === 6) || (i === 8) || (i === 10)) {\n        guid += '-';\n      }\n\n      var hex = s.charCodeAt(i).toString(16);\n      guid += (hex.length === 2) ? hex : '0' + hex;\n    }\n\n    return guid;\n  };\n\n  /**\n   * Reads a GUID index from the stream.\n   *\n   * @return {number}\n   *   Returns an index.\n   */\n  this.readGUIDIndex = function () {\n    if ((this.readTablesHeader().heapOffsetSizes & 0x02) !== 0) {\n      return this.readUInt(4);\n    }\n    else {\n      return this.readUInt(2);\n    }\n  };\n\n  /**\n   * Reads the CLR metadata header.\n   *\n   * @return {MetadataHeader}\n   *   Returns the header values.\n   *\n   * @throws {ParserException}\n   *   Thrown if the header is missing or is invalid.\n   */\n  this.readMetadataHeader = function () {\n    if (!this._metadataHeader) {\n      // Verify that the metadata directory is available.\n      if (this.readCORHeader().metadata.size < 1) {\n        throw new ParserException('The metadata header is missing');\n      }\n\n      // Move the stream cursor to the position of the metadata header.\n      this.setPosition(this.getFileOffset(\n        this.readCORHeader().metadata.virtualAddress));\n\n      // Read the header and throw an exception if it is invalid.\n      this._metadataHeader = new MetadataHeader(this);\n\n      if (this._metadataHeader.signature !== 0x424A5342) {\n        throw new ParserException('Invalid metadata header (signature: 0x' +\n          this._metadataHeader.signature.toString(16).toUpperCase() +\n          ' - expected: 0x424A5342)');\n      }\n    }\n\n    return this._metadataHeader;\n  };\n\n  /**\n   * Reads the CLR method bodies.\n   *\n   * @return {Array<MethodBody>}\n   *   Returns an array of method bodies.\n   */\n  this.readMethodBodies = function () {\n    if (!this._methodBodies) {\n      var tables = this.readTables();\n\n      // Initialize the array of method headers.\n      this._methodBodies = new Array(tables[TableIndexes.METHOD_DEF].length);\n\n      // Parse the method headers referenced by the MethodDef table.\n      for (var i = 0; i < tables[TableIndexes.METHOD_DEF].length; i++) {\n        this.setPosition(this.getFileOffset(tables[TableIndexes.METHOD_DEF][i]\n          .rva));\n        this._methodBodies[i] = new MethodBody(this);\n      }\n    }\n\n    return this._methodBodies;\n  };\n\n  /**\n   * Reads the IL instructions for a method.\n   *\n   * @param {MethodHeader} header\n   *   The method header.\n   *\n   * @return {Array<number>}\n   *   Returns an array of bytes.\n   */\n  this.readMethodInstructions = function (header) {\n    this.setPosition(header.codeOffset);\n    return this.readBytes(header.codeSize);\n  };\n\n  /**\n   * Reads a string from the heap.\n   *\n   * @param {number} index\n   *   The index into the heap.\n   *\n   * @return {string}\n   *   Returns a UTF-8 encoded string.\n   */\n  this.readStringFromHeap = function (index) {\n    // Locate the table stream and throw an exception if it is missing.\n    var streamHeader = this.getStreamHeader('#Strings');\n\n    if (!streamHeader) {\n      throw new ParserException('The #Strings stream is missing');\n    }\n\n    // Move the stream cursor to the position of the string.\n    this.setPosition(this.readMetadataHeader().offset + streamHeader.offset +\n      index);\n\n    // Read the NULL terminated string.\n    return decodeURIComponent(encodeURIComponent(this.readString(0, true)));\n  };\n\n  /**\n   * Reads a string index from the stream.\n   *\n   * @return {number}\n   *   Returns an index.\n   */\n  this.readStringIndex = function () {\n    if ((this.readTablesHeader().heapOffsetSizes & 0x01) !== 0) {\n      return this.readUInt(4);\n    }\n    else {\n      return this.readUInt(2);\n    }\n  };\n\n  /**\n   * Reads the metadata tables.\n   *\n   * @return {Object}\n   *   Returns an array containing the tables.\n   */\n  this.readTables = function () {\n    if (!this._tables) {\n      // Ensure that the tables header has been read.\n      var header = this.readTablesHeader();\n\n      // Move the buffer cursor to the position of the tables.\n      this.setPosition(header.tablesOffset);\n\n      // Read the row count for each of the tables as we cannot read the rows\n      // before this has been done.\n      this._tables = [];\n\n      for (var i = 0; i < 64; i++) {\n        if (((i < 32) && (header.maskValidArray[0] & Math.pow(2, i)) === 0) ||\n          ((i >= 32) && (header.maskValidArray[1] & Math.pow(2, i - 32)) ===\n          0)) {\n          continue;\n        }\n\n        this._tables[i] = new Array(this.readUInt(4));\n      }\n\n      // Now that the row counts have been read, go ahead reading all the rows\n      // one table at a time.\n      for (i = 0; i < 64; i++) {\n        if (!this._tables[i]) {\n          continue;\n        }\n\n        var rowClass = this._getTableRowClass(i);\n        var rowCount = this._tables[i].length;\n\n        for (var r = 0; r < rowCount; r++) {\n          // jscs:disable requireCapitalizedConstructors\n          this._tables[i][r] = new rowClass(this);\n          // jscs:enable requireCapitalizedConstructors\n        }\n      }\n    }\n\n    return this._tables;\n  };\n\n  /**\n   * Reads the metadata tables header.\n   *\n   * @return {TablesHeader}\n   *   Returns the header as an object.\n   *\n   * @throws {ParserException}\n   *   Thrown if the table stream is missing or if the header is invalid.\n   */\n  this.readTablesHeader = function () {\n    if (!this._tablesHeader) {\n      // Locate the table stream and throw an exception if it is missing.\n      var streamHeader = this.getStreamHeader('#~');\n\n      if (!streamHeader) {\n        throw new ParserException('The #~ stream is missing');\n      }\n\n      // Move the stream cursor to the position of the tables header.\n      this.setPosition(this.readMetadataHeader().offset + streamHeader.offset);\n\n      // Read the header and throw an exception if it is invalid.\n      this._tablesHeader = new TablesHeader(this);\n\n      if ((this._tablesHeader.majorVersion !== 2) ||\n        (this._tablesHeader.minorVersion !== 0)) {\n        throw new ParserException('Invalid tables header (version: ' +\n          this._tablesHeader.majorVersion + '.' +\n          this._tablesHeader.minorVersion + ' - expected: 2.0)');\n      }\n    }\n\n    return this._tablesHeader;\n  };\n\n  /**\n   * Retrieves the constructor for a table row.\n   *\n   * @param {number} tableIndex\n   *   The table index.\n   *\n   * @return {Function}\n   *   Returns a constructor.\n   *\n   * @protected\n   */\n  this._getTableRowClass = function (tableIndex) {\n    switch (tableIndex) {\n      case TableIndexes.ASSEMBLY:\n        return AssemblyRow;\n\n      case TableIndexes.ASSEMBLY_OS:\n        return AssemblyOSRow;\n\n      case TableIndexes.ASSEMBLY_PROCESSOR:\n        return AssemblyProcessorRow;\n\n      case TableIndexes.ASSEMBLY_REF:\n        return AssemblyRefRow;\n\n      case TableIndexes.ASSEMBLY_REF_OS:\n        return AssemblyRefOSRow;\n\n      case TableIndexes.ASSEMBLY_REF_PROCESSOR:\n        return AssemblyRefProcessorRow;\n\n      case TableIndexes.CLASS_LAYOUT:\n        return ClassLayoutRow;\n\n      case TableIndexes.CONSTANT:\n        return ConstantRow;\n\n      case TableIndexes.CUSTOM_ATTRIBUTE:\n        return CustomAttributeRow;\n\n      case TableIndexes.DECL_SECURITY:\n        return DeclSecurityRow;\n\n      case TableIndexes.EVENT:\n        return EventRow;\n\n      case TableIndexes.EVENT_MAP:\n        return EventMapRow;\n\n      case TableIndexes.EXPORTED_TYPE:\n        return ExportedTypeRow;\n\n      case TableIndexes.FIELD:\n        return FieldRow;\n\n      case TableIndexes.FIELD_LAYOUT:\n        return FieldLayoutRow;\n\n      case TableIndexes.FIELD_MARSHAL:\n        return FieldMarshalRow;\n\n      case TableIndexes.FIELD_RVA:\n        return FieldRVARow;\n\n      case TableIndexes.FILE:\n        return FileRow;\n\n      case TableIndexes.GENERIC_PARAM:\n        return GenericParamRow;\n\n      case TableIndexes.GENERIC_PARAM_CONSTRAINT:\n        return GenericParamConstraintRow;\n\n      case TableIndexes.IMPL_MAP:\n        return ImplMapRow;\n\n      case TableIndexes.INTERFACE_IMPL:\n        return InterfaceImplRow;\n\n      case TableIndexes.MANIFEST_RESOURCE:\n        return ManifestResourceRow;\n\n      case TableIndexes.MEMBER_REF:\n        return MemberRefRow;\n\n      case TableIndexes.NESTED_CLASS:\n        return NestedClassRow;\n\n      case TableIndexes.METHOD_DEF:\n        return MethodDefRow;\n\n      case TableIndexes.METHOD_IMPL:\n        return MethodImplRow;\n\n      case TableIndexes.METHOD_SEMANTICS:\n        return MethodSemanticsRow;\n\n      case TableIndexes.MODULE:\n        return ModuleRow;\n\n      case TableIndexes.MODULE_REF:\n        return ModuleRefRow;\n\n      case TableIndexes.PARAM:\n        return ParamRow;\n\n      case TableIndexes.PROPERTY:\n        return PropertyRow;\n\n      case TableIndexes.PROPERTY_MAP:\n        return PropertyMapRow;\n\n      case TableIndexes.STAND_ALONE_SIG:\n        return StandAloneSigRow;\n\n      case TableIndexes.TYPE_DEF:\n        return TypeDefRow;\n\n      case TableIndexes.TYPE_REF:\n        return TypeRefRow;\n\n      case TableIndexes.TYPE_SPEC:\n        return TypeSpecRow;\n\n      default:\n        throw new ParserException('Unsupported metadata table at index ' +\n          tableIndex);\n    }\n  };\n\n}\n\nmodule.exports = CILParser;\n","/**\n * This file is part of ComilaJS.\n *\n * ComilaJS is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ComilaJS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ComilaJS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar CILParser = require('./Parser/CILParser');\nvar Compiler = require('./Compiler/Compiler');\n\n/**\n * Class Main.\n *\n * @constructor\n * @final\n */\nfunction Main () {\n\n  'use strict';\n\n  /**\n   * Runs an executable.\n   *\n   * @param {string} path\n   *   The path.\n   *\n   * @return {Main}\n   *   Returns this instance.\n   */\n  this.run = function (path) {\n    console.info('Downloading application \\'' + path + '\\'');\n\n    (new CILParser(path)).loadFile(function (parser) {\n      console.info('Compiling application \\'' + parser.getPath() + '\\'');\n\n      var compiler;\n      var module;\n\n      try {\n        compiler = new Compiler(parser);\n        module = compiler.compile();\n      }\n      catch (ex) {\n        console.error('Failed to compile application \\'' +\n          parser.getPath() + '\\': ' + ex.getMessage());\n        return;\n      }\n\n      console.info('Running application \\'' + parser.getPath() + '\\'');\n\n      try {\n        module.run();\n      }\n      catch (ex) {\n        console.error('Failed to run application \\'' +\n          parser.getPath() + '\\': ' + ex.getMessage());\n      }\n    }, function (parser, status) {\n      console.error('Failed to download application \\'' + parser.getPath() +\n        '\\' (HTTP ' + status + ')');\n    });\n\n    return this;\n  };\n\n}\n\nmodule.exports = new Main();\n"],"sourceRoot":""}